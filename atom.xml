<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Joynoy&#39;s Blog</title>
  
  <subtitle>Learn something</subtitle>
  <link href="http://www.jonyonwzj.top/atom.xml" rel="self"/>
  
  <link href="http://www.jonyonwzj.top/"/>
  <updated>2021-03-31T15:44:42.008Z</updated>
  <id>http://www.jonyonwzj.top/</id>
  
  <author>
    <name>Zhengjie Wu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis</title>
    <link href="http://www.jonyonwzj.top/2021/02/10/redis/"/>
    <id>http://www.jonyonwzj.top/2021/02/10/redis/</id>
    <published>2021-02-10T15:08:15.000Z</published>
    <updated>2021-03-31T15:44:42.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NoSQL概述"><a href="#NoSQL概述" class="headerlink" title="NoSQL概述"></a>NoSQL概述</h1><h2 id="为什么要用NoSQL"><a href="#为什么要用NoSQL" class="headerlink" title="为什么要用NoSQL"></a>为什么要用NoSQL</h2><p>现在是大数据时代，一般的数据库无法进行分析处理</p><ol><li><p>单机MySQL年代</p><p><img src="/2021/02/10/redis/image-20210130134059341.png" alt="image-20210130134059341"></p><p>90年代，一个基本的网站访问量一般不会太大，单个数据库完全足够</p><p>那个时候更多的是去使用静态网页html，服务器更本没有太大的压力</p><p>在这种情况下，整个网站的瓶颈是什么</p><p>1.数据量如果太大，一个机器放不下</p><p>2.数据的索引，300万条数据，一定需要创建索引(B+Tree),一个机器内存放不下</p><p>3.访问量，读写混合，一个服务器承受不了</p><p>只要出现以上三个情况之一，那么就需要升级</p><a id="more"></a></li><li><p>Memcached(缓存)+MySQL+垂直拆分（读写分离）</p><p>网站80%都是在读，每次到要去查寻数据库的话就十分麻烦，所以说我们希望减轻数据的压力，我们可以用缓存来保证效率</p><p>发展过程：优化数据结构和索引—&gt;文件缓存（IO）—&gt;Memcahed（当时最热门的技术）</p><p><img src="/2021/02/10/redis/image-20210130135120890.png" alt="image-20210130135120890"></p></li><li><p>分库分表+水平拆分+MySQL集群</p><p><img src="/2021/02/10/redis/image-20210130135926650.png" alt="image-20210130135926650"></p></li><li><p>如今（定位、热榜也是一种数据）</p><p>MySQL等关系型数据库不够用了，数据量很多，变化很快</p><p>MySQL有点使用他来存储一些比较大的文件、博客、图片，数据库表很大，效率就很低，如果有一种数据库来专门处理这种数据，MySQL压力就变得十分小（研究如何处理这种问题）大数据的IO压力下，表几乎没法更改</p></li><li><p>目前一个基本的互联网架构</p><p><img src="/2021/02/10/redis/image-20210130142003701.png" alt="image-20210130142003701"></p></li><li><p>所以为什么要用NoSQL</p><p>用户的个人信息、社交网络、地理位置、用户自己产生的数据，用户日志等等爆发式增长</p><p>这时候使用NoSQL数据库可以很好的解决以上情况</p></li></ol><h2 id="什么是NoSQL"><a href="#什么是NoSQL" class="headerlink" title="什么是NoSQL"></a>什么是NoSQL</h2><p><strong>NoSQL</strong></p><p>NoSQL=not only sql(不仅仅是SQL)  泛指非关系型数据库</p><p>关系型数据库：表格、行、列</p><p>随着web2.0互联网的诞生，传统的关系型数据库很难对付web2.0时代，尤其是超大规模、高并发的社区，暴露出来很多难以克服的问题，NoSQL在当今大数据环境下发展十分迅速，Redis是发展最快的，当下必须掌握的一门技术</p><p>很多数据库类型，用户的个人信息，社交网络，地理位置。这些数据的存储类型不需要一个固定的格式，不需要多余的操作就可以横向扩展（用多台机器实现—&gt;集群）Map&lt;String,Object&gt;使用键值对来控制</p><p><strong>NoSQL的特点</strong></p><ol><li>方便扩展（数据之间没有关系，很好扩展）</li><li>大数据量高性能（Redis一秒可以写八万次，可以读取十一万次，NoSQL的缓存记录是一种细粒度的缓存，性能比较高）</li><li>数据类型是多样型的（不需要事先设计数据库，随取随用）</li><li>传统的RDBMS和NoSQL<ol><li>传统的RDBMS<ol><li>结构化组织</li><li>SQL</li><li>数据和组织都存在单独的表中</li><li>操作，数据库定义语言</li><li>严格的一致性</li><li>基础的事务</li></ol></li><li>NoSQL<ol><li>不仅仅是数据</li><li>没有固定的查询语言</li><li>键值对存储，列存储，文档存储，图形数据库（社交关系）</li><li>最终一致性</li><li>CAP定理和BASE（异地多活）</li><li>高新能，高可用，高可扩展</li></ol></li></ol></li></ol><h2 id="网页的数据放在哪里"><a href="#网页的数据放在哪里" class="headerlink" title="网页的数据放在哪里"></a>网页的数据放在哪里</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.商品的基本信息</span></span><br><span class="line"> 名称、价格、商家信息</span><br><span class="line"> 使用关系型数据库  MySQL/Oracle</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.商品的描述、评论（文字比较多）</span></span><br><span class="line"> 文档型数据库，MongoDB</span><br><span class="line"> </span><br><span class="line"><span class="comment">#3.图片</span></span><br><span class="line"> 分布式文件系统 FastDFS</span><br><span class="line"> 淘宝自己的    TFS</span><br><span class="line"> Google的     GFS</span><br><span class="line"> Hadoop       HDFS</span><br><span class="line"> 阿里云的      OSS</span><br><span class="line"> </span><br><span class="line"><span class="comment">#4.商品的关键字</span></span><br><span class="line"> 搜索引擎   solr elasticsearch</span><br><span class="line"> ISearch</span><br><span class="line"> </span><br><span class="line"><span class="comment">#5.商品热门的波段信息</span></span><br><span class="line"> 内存数据库</span><br><span class="line"> Redis</span><br><span class="line"> </span><br><span class="line"><span class="comment">#6.商品的交易，外部的支付接口</span></span><br><span class="line"> 三方应用</span><br></pre></td></tr></table></figure><h2 id="NoSQL的四大分类"><a href="#NoSQL的四大分类" class="headerlink" title="NoSQL的四大分类"></a>NoSQL的四大分类</h2><p><strong>KV键值对：</strong></p><ul><li>新浪：Redis</li><li>美团：Redis+Tair</li><li>阿里、百度：Redis+Memcache</li></ul><p><strong>文档型数据库（bson格式  和json一样）：</strong></p><ul><li>MongoDB（一般必须要掌握）<ul><li>MongoDB是一个基于分布式文件存储的数据库，C++编写，主要用来处理大量的文档</li><li>MongoDB是一个介于关系型数据库和非关系数据库中间的产品。MongoDB是非关系型数据库中功能最丰富、最像关系型数据库的</li></ul></li><li>CouchDB</li></ul><p><strong>列存储数据库：</strong></p><ul><li>HBase</li><li>分布式文件系统</li></ul><p><strong>图关系数据库：</strong></p><ul><li>它不是存图形的，存的是关系。比如：朋友圈、社交网络、广告推荐</li><li>Neo4j、InfoGrid</li></ul><p><img src="/2021/02/10/redis/image-20210130173653296.png" alt="image-20210130173653296"></p><h1 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>Redis是什么？</strong></p><p><em>Redis</em>（<strong>Re</strong>mote <strong>Di</strong>ctionary <strong>S</strong>erver )，即远程字典服务</p><p>是一个开源的使用ANSI <a href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80">C语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728">数据库</a>，并提供多种语言的API。</p><p><strong>Redis能干嘛？</strong></p><ul><li>内存存储、持久化（内存是断电即失的。所以说持久化很重要（rdb、aof））</li><li>效率高，可以用于高速缓存</li><li>发布订阅系统</li><li>地图信息分析</li><li>计数器（微信、微博浏览量）</li></ul><p><strong>Redis特性</strong></p><ul><li>多样的数据类型</li><li>持久化</li><li>集群</li><li>事务</li></ul><p><strong>学习中需要用到的东西</strong></p><ul><li>官网：<a href="http://www.redis.cn/">http://www.redis.cn/</a></li></ul><p><strong>Redis推荐在Linux服务器上搭建</strong></p><h2 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h2><h3 id="使用docker安装"><a href="#使用docker安装" class="headerlink" title="使用docker安装"></a>使用docker安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]<span class="comment"># docker pull redis</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]<span class="comment"># docker run -d -p 6666:6379 redis     #映射到6666端口</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]<span class="comment"># redis-cli -p 6666                    #使用redis客户端进行连接</span></span><br><span class="line">127.0.0.1:6666&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6666&gt; ping</span><br><span class="line">PONG                          <span class="comment">#连接成功</span></span><br><span class="line">127.0.0.1:6666&gt; <span class="built_in">set</span> name jonyon</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; get name</span><br><span class="line"><span class="string">&quot;jonyon&quot;</span></span><br></pre></td></tr></table></figure><h2 id="测试性能"><a href="#测试性能" class="headerlink" title="测试性能"></a>测试性能</h2><p><strong>redis-benchmark是</strong>一个压力测试工具</p><p>官方自带的性能测试工具</p><p>redis-benchmark命令参数</p><p><img src="/2021/02/10/redis/image-20210130182208507.png" alt="image-20210130182208507"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#测试 100个并发、100000请求</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]<span class="comment"># redis-benchmark -h localhost -p 6666 -c 100 -n 100000  #不使用docker用这条命令</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]<span class="comment"># docker exec -it 6ede1840c0b9 redis-benchmark -h 39.97.212.128 -p 6666 -c 100 -n 100000                #使用docker</span></span><br></pre></td></tr></table></figure><p><img src="/2021/02/10/redis/image-20210130183743125.png" alt="image-20210130183743125"></p><h1 id="Redis基础知识"><a href="#Redis基础知识" class="headerlink" title="Redis基础知识"></a>Redis基础知识</h1><p>Redis默认有16个数据库，默认使用第0个数据库，可以使用select进行切换数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]<span class="comment"># redis-cli -p 6666</span></span><br><span class="line">127.0.0.1:6666&gt; dbsize   <span class="comment">#查看db大小</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; select 5 <span class="comment">#切换数据库</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666[5]&gt; select 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; keys *   <span class="comment">#查看数据库所有的key</span></span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; get name <span class="comment">#获得key的value</span></span><br><span class="line"><span class="string">&quot;jonyon&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; flushdb  <span class="comment">#清空当前数据库</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6666&gt; flushdb  <span class="comment">#清空全部数据库</span></span><br></pre></td></tr></table></figure><p>0edis为什么是6379：粉丝效应</p><h2 id="Redis是单线程的"><a href="#Redis是单线程的" class="headerlink" title="Redis是单线程的"></a>Redis是单线程的</h2><p>Redis是很快的，基于内存操作，CPU不是Redis的性能瓶颈，Redis的瓶颈是根据机器的内存和网络带宽，既然可以使用单线程来使用，所以就使用了单线程</p><h2 id="Redis为什么单线程海那么块"><a href="#Redis为什么单线程海那么块" class="headerlink" title="Redis为什么单线程海那么块"></a>Redis为什么单线程海那么块</h2><p>Redis是c语言写的，官方提供的数据为100000+QPS，完全不比同样是使用k-v的Memcache差</p><p>误区一：高性能的服务器一定是多线程的</p><p>误区二：多线程（CPU上下文切换）一定比单线程效率高</p><p>速度：CPU&gt;内存&gt;硬盘</p><p>和兴：Redis是将所有的数据放在内存中的，所以说使用单线程去操作效率就是最高的，因为多线程之间会造成CPU之间上下文切换，这时一个耗时的操作。对于内存系统来说，如果没有上下文切换，效率就是最高的，多次读写都是在一个CPU上的，所以说在内存情况下，这个就是最佳方案</p><h1 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h1><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作<strong>数据库</strong>、<strong>缓存</strong>和<strong>消息中间件</strong>。 它支持多种类型的数据结构，如 <a href="http://www.redis.cn/topics/data-types-intro.html#strings">字符串（strings）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hashes">散列（hashes）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#lists">列表（lists）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sets">集合（sets）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sorted-sets">有序集合（sorted sets）</a> 与范围查询， <a href="http://www.redis.cn/topics/data-types-intro.html#bitmaps">bitmaps</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hyperloglogs">hyperloglogs</a> 和 <a href="http://www.redis.cn/commands/geoadd.html">地理空间（geospatial）</a> 索引半径查询。 Redis 内置了 <a href="http://www.redis.cn/topics/replication.html">复制（replication）</a>，<a href="http://www.redis.cn/commands/eval.html">LUA脚本（Lua scripting）</a>， <a href="http://www.redis.cn/topics/lru-cache.html">LRU驱动事件（LRU eviction）</a>，<a href="http://www.redis.cn/topics/transactions.html">事务（transactions）</a> 和不同级别的 <a href="http://www.redis.cn/topics/persistence.html">磁盘持久化（persistence）</a>， 并通过 <a href="http://www.redis.cn/topics/sentinel.html">Redis哨兵（Sentinel）</a>和自动 <a href="http://www.redis.cn/topics/cluster-tutorial.html">分区（Cluster）</a>提供高可用性（high availability）。</p><h2 id="Redis-Key"><a href="#Redis-Key" class="headerlink" title="Redis-Key"></a>Redis-Key</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6666&gt; <span class="built_in">set</span> name jonyon</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; <span class="built_in">set</span> age 21</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; keys *</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; expire name 10   <span class="comment">#设置key的过期时间，单位是秒</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; ttl name         <span class="comment">#查看当前key的剩余时间</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6666&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line">127.0.0.1:6666&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line">127.0.0.1:6666&gt; keys *</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; exists name       <span class="comment">#判断当前key是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6666&gt; exists age</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; <span class="built_in">type</span> age          <span class="comment">#查看当前key的类型</span></span><br><span class="line">string</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6666&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; get k1</span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k1&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; append k1 <span class="string">&quot;hello&quot;</span>    <span class="comment">#追加字符串，如果当前key不存在，就相当于set key</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6666&gt; get k1 </span><br><span class="line"><span class="string">&quot;v1hello&quot;</span> </span><br><span class="line">127.0.0.1:6666&gt; strlen k1            <span class="comment">#获取字符串的长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line"><span class="comment">########################################################################################################</span></span><br><span class="line">步长（i++）</span><br><span class="line">127.0.0.1:6666&gt; <span class="built_in">set</span> views 0    <span class="comment">#初始浏览量为0</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; get views</span><br><span class="line"><span class="string">&quot;0&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; INCR views     <span class="comment">#自增1，浏览量+1</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; get views</span><br><span class="line"><span class="string">&quot;1&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; INCR views</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6666&gt; get views</span><br><span class="line"><span class="string">&quot;2&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; DECR views      <span class="comment">#自减1，浏览量-1</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; get views</span><br><span class="line"><span class="string">&quot;1&quot;</span> </span><br><span class="line">127.0.0.1:6666&gt; INCRBY views 5  <span class="comment">#可以设置步长，指定增量5</span></span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6666&gt; get views</span><br><span class="line"><span class="string">&quot;6&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; DECRBY views 3  <span class="comment">#可以设置步长，指定减量3</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6666&gt; get views</span><br><span class="line"><span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="comment">########################################################################################################</span></span><br><span class="line"><span class="comment">#字符串范围   range</span></span><br><span class="line">127.0.0.1:6666&gt; <span class="built_in">set</span> k1 hello,jonyon</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; get k1</span><br><span class="line"><span class="string">&quot;hello,jonyon&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; getrange k1 0 3     <span class="comment">#截取字符串【0，3】</span></span><br><span class="line"><span class="string">&quot;hell&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; getrange k1 0 -1    <span class="comment">#获取全部字符串，相当于get k1</span></span><br><span class="line"><span class="string">&quot;hello,jonyon&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; <span class="built_in">set</span> k2 <span class="built_in">bye</span>,jonyon</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; get k2</span><br><span class="line"><span class="string">&quot;bye,jonyon&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; setrange k2 0 xxx    <span class="comment">#替换指定位置开始的字符串</span></span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">127.0.0.1:6666&gt; get k2</span><br><span class="line"><span class="string">&quot;xxx,jonyon&quot;</span></span><br><span class="line"><span class="comment">######################################################################################################### #   setex(set with expire)  #设置过期时间</span></span><br><span class="line"><span class="comment">#   setnx(set if no expire) #不存在再设置  （在分布式锁中会常常使用）</span></span><br><span class="line">127.0.0.1:6666&gt; setex k3 30 <span class="string">&quot;hello&quot;</span>     <span class="comment">#设置k3的值为hello，30秒后过期</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k3&quot;</span></span><br><span class="line">2) <span class="string">&quot;k2&quot;</span></span><br><span class="line">3) <span class="string">&quot;k1&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; setnx k4 <span class="string">&quot;redis&quot;</span>        <span class="comment">#如果mykey不存在，则创建mykey</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k4&quot;</span></span><br><span class="line">2) <span class="string">&quot;k2&quot;</span></span><br><span class="line">3) <span class="string">&quot;k1&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; get k4</span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; setnx k4 <span class="string">&quot;mongodb&quot;</span>      <span class="comment">#如果mykey存在，则创建失败</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6666&gt; get k4</span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br><span class="line"><span class="comment">######################################################################################################### </span></span><br><span class="line"><span class="comment">#  mset   mget</span></span><br><span class="line">127.0.0.1:6666&gt; mset k1 v1 k2 v2 k3 v3      <span class="comment">#同时设置多个值</span></span><br><span class="line">OK </span><br><span class="line">127.0.0.1:6666&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k3&quot;</span></span><br><span class="line">2) <span class="string">&quot;k2&quot;</span></span><br><span class="line">3) <span class="string">&quot;k1&quot;</span>  </span><br><span class="line">127.0.0.1:6666&gt; mget k1 k2 k3               <span class="comment">#同时获取多个值</span></span><br><span class="line">1) <span class="string">&quot;v1&quot;</span></span><br><span class="line">2) <span class="string">&quot;v2&quot;</span></span><br><span class="line">3) <span class="string">&quot;v3&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; msetnx k1 v1 k4 v4          <span class="comment">#msetnx是一个原子性的操作，要么一起成功，要么一起失败</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6666&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k3&quot;</span></span><br><span class="line">2) <span class="string">&quot;k2&quot;</span></span><br><span class="line">3) <span class="string">&quot;k1&quot;</span></span><br><span class="line"><span class="comment">########################################################################################################## 对象</span></span><br><span class="line"><span class="built_in">set</span> user:1&#123;name:zhangsan,age:2&#125; <span class="comment">#设置一个user:1对象，值为json字符串来保存一个对象</span></span><br><span class="line"><span class="comment"># 这里的keys是一个巧妙的设计，user:&#123;id&#125;:&#123;filed&#125;</span></span><br><span class="line">127.0.0.1:6666&gt; mset user:1:name jonyon user:1:age 21</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; mget user:1:name user:1:age</span><br><span class="line">1) <span class="string">&quot;jonyon&quot;</span></span><br><span class="line">2) <span class="string">&quot;21&quot;</span></span><br><span class="line"><span class="comment">######################################################################################################### getset  #先get再set</span></span><br></pre></td></tr></table></figure><p>数据结构是相同的</p><p>String类似的使用场景</p><ul><li>计数器</li><li>统计多单位的数量</li><li>粉丝数</li><li>对象缓存存储</li></ul><h2 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h2><p>基本的数据类型，列表</p><p><img src="/2021/02/10/redis/image-20210131154319198.png" alt="image-20210131154319198"></p><p>在redis里面，可以使用list实现栈、队列、阻塞队列</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#所有的list命令都是l开头的</span></span><br><span class="line">127.0.0.1:6666&gt; lpush list one    <span class="comment">#将一个或多个值插入到列表的头部 lpush--&gt;left push 从队列左边插入</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; lpush list two</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6666&gt; lpush list three</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6666&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; lrange list 0 1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; rpush list four   <span class="comment">#将一个或多个值插入到列表的尾部 rpush--&gt;right push 从队列右边插入</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6666&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">4) <span class="string">&quot;four&quot;</span></span><br><span class="line"><span class="comment">#########################################################################################################</span></span><br><span class="line">127.0.0.1:6666&gt; lpop list    <span class="comment">#移除列表最左边的元素（第一个元素）</span></span><br><span class="line"><span class="string">&quot;three&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; rpop list    <span class="comment">#移除列表最右边的元素（最后一个）</span></span><br><span class="line"><span class="string">&quot;four&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line"><span class="comment">#########################################################################################################</span></span><br><span class="line">127.0.0.1:6666&gt; lindex list 0  <span class="comment">#通过下表获得list中某一个值</span></span><br><span class="line"><span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; lindex list 1</span><br><span class="line"><span class="string">&quot;one&quot;</span></span><br><span class="line"><span class="comment">######################################################################################################### #   llen</span></span><br><span class="line">127.0.0.1:6666&gt; llen list     <span class="comment">#返回列表的长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment">######################################################################################################### </span></span><br><span class="line"><span class="comment">#   移除指定的值</span></span><br><span class="line">127.0.0.1:6666&gt; rpush list one</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6666&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; lrem list 1 one    <span class="comment">#移除list集合中指定个数的value，精确匹配</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line"><span class="comment">############################################################################################################  trim 修剪、截断</span></span><br><span class="line">127.0.0.1:6666&gt; rpush mylist <span class="string">&quot;hello0&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; rpush mylist <span class="string">&quot;hello1&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6666&gt; rpush mylist <span class="string">&quot;hello2&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6666&gt; rpush mylist <span class="string">&quot;hello3&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6666&gt; lrange mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;hello0&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello3&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; ltrim mylist 1 2     <span class="comment">#通过下表截取指定的长度</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; lrange mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello2&quot;</span></span><br><span class="line"><span class="comment">############################################################################################################   rpoplpush  #移除列表最右边（最后一个）元素，并将它移动到新列表的最左边（第一个）</span></span><br><span class="line">127.0.0.1:6666&gt; rpush list one</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; rpush list two</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6666&gt; rpush list three</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6666&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; rpoplpush list  otherlist</span><br><span class="line"><span class="string">&quot;three&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; lrange otherlist 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line"><span class="comment">###############################################################################################################  lset #将列表中指定下标的值替换为另外一个值</span></span><br><span class="line">127.0.0.1:6666&gt; lpush list k</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;k&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; lset list 0 key</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;key&quot;</span></span><br><span class="line"><span class="comment">##########################################################################################################  insert #将某个具体的value插入到列表中某个元素的前面或者后面</span></span><br><span class="line">127.0.0.1:6666&gt; rpush list <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; rpush list <span class="string">&quot;world&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6666&gt; linsert list before <span class="string">&quot;world&quot;</span> <span class="string">&quot;other&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6666&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;other&quot;</span></span><br><span class="line">3) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; linsert list after <span class="string">&quot;world&quot;</span> <span class="string">&quot;new&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6666&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;other&quot;</span></span><br><span class="line">3) <span class="string">&quot;world&quot;</span></span><br><span class="line">4) <span class="string">&quot;new&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>小结：它实际上是一个链表(before  node  after)</strong></p><ul><li>如果key不存在，创建新的链表</li><li>如果key存在，新增内容</li><li>如果移除了所有值，空链表</li><li>两边插入或改动效率最高，中间元素插入或改动效率低</li></ul><p>消息队列（lpush rpop）、栈（lpush rpop）</p><h2 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set(集合)"></a>Set(集合)</h2><p>set中的值不能重复,set中存储的数据是无序的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6666&gt; sadd <span class="built_in">set</span> <span class="string">&quot;jonyon&quot;</span>      <span class="comment">#set集合中添加元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; sadd <span class="built_in">set</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; sadd <span class="built_in">set</span> <span class="string">&quot;ok&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; SMEMBERS <span class="built_in">set</span>           <span class="comment">#查看指定set的所有值</span></span><br><span class="line">1) <span class="string">&quot;ok&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello&quot;</span></span><br><span class="line">3) <span class="string">&quot;jonyon&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; SISMEMBER <span class="built_in">set</span> hello    <span class="comment">#判断某一个值是不是在元素中</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; SISMEMBER <span class="built_in">set</span> hell</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment">#############################################################################################################</span></span><br><span class="line">127.0.0.1:6666&gt; sadd <span class="built_in">set</span> <span class="string">&quot;ok&quot;</span>          <span class="comment">#不能添加重复的值</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6666&gt; scard <span class="built_in">set</span>              <span class="comment">#获取set集合中的内容元素个数</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"><span class="comment">##############################################################################################################</span></span><br><span class="line">127.0.0.1:6666&gt; srem <span class="built_in">set</span> <span class="string">&quot;ok&quot;</span>         <span class="comment">#移除set集合中的指定元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; SMEMBERS <span class="built_in">set</span></span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;jonyon&quot;</span></span><br><span class="line"><span class="comment">##############################################################################################################  set无序不重复集合</span></span><br><span class="line">127.0.0.1:6666&gt; SRANDMEMBER <span class="built_in">set</span>    <span class="comment">#随机抽选出一个元素</span></span><br><span class="line"><span class="string">&quot;jonyon&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; SRANDMEMBER <span class="built_in">set</span></span><br><span class="line"><span class="string">&quot;ok&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; SRANDMEMBER <span class="built_in">set</span> 2  <span class="comment">#随机抽选出指定个数的元素</span></span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;ok&quot;</span></span><br><span class="line"><span class="comment">###############################################################################################################</span></span><br><span class="line">127.0.0.1:6666&gt; spop <span class="built_in">set</span>       <span class="comment">#随机移除元素</span></span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; spop <span class="built_in">set</span></span><br><span class="line"><span class="string">&quot;jonyon&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; SMEMBERS <span class="built_in">set</span></span><br><span class="line">1) <span class="string">&quot;ok&quot;</span></span><br><span class="line"><span class="comment">###############################################################################################################   将一个指定的值，移动到另外一个集合中</span></span><br><span class="line">127.0.0.1:6666&gt; sadd <span class="built_in">set</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; sadd <span class="built_in">set</span> <span class="string">&quot;world&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; sadd <span class="built_in">set</span> <span class="string">&quot;jonyon&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; smove <span class="built_in">set</span> set2 <span class="string">&quot;jonyon&quot;</span>     <span class="comment">#   将一个指定的值，移动到另外一个集合中</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; SMEMBERS <span class="built_in">set</span>     </span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; SMEMBERS set2</span><br><span class="line">1) <span class="string">&quot;jonyon&quot;</span></span><br><span class="line"><span class="comment">###############################################################################################################  集合</span></span><br><span class="line">127.0.0.1:6666&gt; sadd k1 <span class="string">&quot;a&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; sadd k1 <span class="string">&quot;b&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; sadd k1 <span class="string">&quot;c&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; sadd k2 <span class="string">&quot;c&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; sadd k2 <span class="string">&quot;d&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; sadd k2 <span class="string">&quot;e&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; sdiff k1 k2   <span class="comment">#差集</span></span><br><span class="line">1) <span class="string">&quot;b&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; sinter k1 k2  <span class="comment">#交集</span></span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; sunion k1 k2  <span class="comment">#并集</span></span><br><span class="line">1) <span class="string">&quot;b&quot;</span></span><br><span class="line">2) <span class="string">&quot;c&quot;</span></span><br><span class="line">3) <span class="string">&quot;a&quot;</span></span><br><span class="line">4) <span class="string">&quot;e&quot;</span></span><br><span class="line">5) <span class="string">&quot;d&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Hash-哈希"><a href="#Hash-哈希" class="headerlink" title="Hash(哈希)"></a>Hash(哈希)</h2><p>Map集合，key-value集合</p><p>这时候这个值是一个map集合，本质和String类型没有太大区别，还是一个简单的k-v</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6666&gt; hset <span class="built_in">hash</span> field1 jonyon       <span class="comment">#set一个具体的key-value</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; hget <span class="built_in">hash</span> field1              <span class="comment">#获取一个字段值</span></span><br><span class="line"><span class="string">&quot;jonyon&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; hmset <span class="built_in">hash</span> field1 hello field2 jonyon  <span class="comment">#set多个key-value</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; hmget <span class="built_in">hash</span> field1 field2      <span class="comment">#获取多个字段值</span></span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;jonyon&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; hgetall <span class="built_in">hash</span>                   <span class="comment">#获取全部数据</span></span><br><span class="line">1) <span class="string">&quot;field1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello&quot;</span></span><br><span class="line">3) <span class="string">&quot;field2&quot;</span></span><br><span class="line">4) <span class="string">&quot;jonyon&quot;</span></span><br><span class="line"><span class="comment">###########################################################################################################</span></span><br><span class="line">127.0.0.1:6666&gt; hdel <span class="built_in">hash</span> field1               <span class="comment">#删除hash指定的key，对应的value也消失</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; hgetall <span class="built_in">hash</span></span><br><span class="line">1) <span class="string">&quot;field2&quot;</span></span><br><span class="line">2) <span class="string">&quot;jonyon&quot;</span></span><br><span class="line"><span class="comment">###########################################################################################################</span></span><br><span class="line">127.0.0.1:6666&gt; hlen <span class="built_in">hash</span>                       <span class="comment">#获取hash表的字段数量</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment">###########################################################################################################</span></span><br><span class="line">127.0.0.1:6666&gt; HEXISTS <span class="built_in">hash</span> field1             <span class="comment">#判断hash中的指定字段是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6666&gt; HEXISTS <span class="built_in">hash</span> field2</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment">########################################################################################################### 只获得所有的key或所有的value</span></span><br><span class="line">127.0.0.1:6666&gt; hkeys <span class="built_in">hash</span></span><br><span class="line">1) <span class="string">&quot;field2&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; hvals <span class="built_in">hash</span></span><br><span class="line">1) <span class="string">&quot;jonyon&quot;</span></span><br><span class="line"><span class="comment">###########################################################################################################    自增和自减</span></span><br><span class="line">127.0.0.1:6666&gt; hset <span class="built_in">hash</span> field1 1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; HINCRBY <span class="built_in">hash</span> field1 3</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6666&gt; HINCRBY <span class="built_in">hash</span> field1 -2</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6666&gt; hgetall <span class="built_in">hash</span></span><br><span class="line">1) <span class="string">&quot;field1&quot;</span></span><br><span class="line">2) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="comment">###########################################################################################################  如果存在则可以设置</span></span><br><span class="line">127.0.0.1:6666&gt; hsetnx <span class="built_in">hash</span> field4 hello    <span class="comment">#如果不存在则可以设置</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; hsetnx <span class="built_in">hash</span> field4 ok       <span class="comment">#如果存在则不可以设置</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>hash变更的数据user name age，尤其是用户信息之类的，经常变动的信息</p><p>hash更适合于对象的存储、String更适合字符串的存储</p><h2 id="Zset-有序集合"><a href="#Zset-有序集合" class="headerlink" title="Zset(有序集合)"></a>Zset(有序集合)</h2><p>在set的基础上增加了一个值</p><ul><li>set k1 v1</li><li>zset k1 score1 v1</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6666&gt; zadd myzset 1 one 3 three 2 two     <span class="comment">#添加</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6666&gt; zrange myzset 0 -1</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line"><span class="comment">############################################################################################################  排序如何实现</span></span><br><span class="line">127.0.0.1:6666&gt; zadd salary 1200 jonyon 2500 adger 10000 wzj</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6666&gt; zrange salary 0 -1</span><br><span class="line">1) <span class="string">&quot;jonyon&quot;</span></span><br><span class="line">2) <span class="string">&quot;adger&quot;</span></span><br><span class="line">3) <span class="string">&quot;wzj&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; ZRANGEBYSCORE salary -inf +inf              <span class="comment">#正无穷---&gt;负无穷排序</span></span><br><span class="line">1) <span class="string">&quot;jonyon&quot;</span></span><br><span class="line">2) <span class="string">&quot;adger&quot;</span></span><br><span class="line">3) <span class="string">&quot;wzj&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; ZRANGEBYSCORE salary -inf +inf withscores   <span class="comment">#正无穷---&gt;负无穷排序，带上scores</span></span><br><span class="line">1) <span class="string">&quot;jonyon&quot;</span></span><br><span class="line">2) <span class="string">&quot;1200&quot;</span></span><br><span class="line">3) <span class="string">&quot;adger&quot;</span></span><br><span class="line">4) <span class="string">&quot;2500&quot;</span></span><br><span class="line">5) <span class="string">&quot;wzj&quot;</span></span><br><span class="line">6) <span class="string">&quot;10000&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; ZRANGEBYSCORE salary -inf 2500 withscores   <span class="comment">#正无穷---&gt;2500排序，带上scores</span></span><br><span class="line">1) <span class="string">&quot;jonyon&quot;</span></span><br><span class="line">2) <span class="string">&quot;1200&quot;</span></span><br><span class="line">3) <span class="string">&quot;adger&quot;</span></span><br><span class="line">4) <span class="string">&quot;2500&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; ZREVRANGEBYSCORE salary +inf -inf           <span class="comment">#负无穷---&gt;正无穷排序</span></span><br><span class="line">1) <span class="string">&quot;wzj&quot;</span></span><br><span class="line">2) <span class="string">&quot;adger&quot;</span></span><br><span class="line">3) <span class="string">&quot;jonyon&quot;</span></span><br><span class="line"><span class="comment">############################################################################################################ 移除</span></span><br><span class="line">127.0.0.1:6666&gt; zrange salary 0 -1</span><br><span class="line">1) <span class="string">&quot;jonyon&quot;</span></span><br><span class="line">2) <span class="string">&quot;adger&quot;</span></span><br><span class="line">3) <span class="string">&quot;wzj&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; zrem salary wzj</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; zrange salary 0 -1</span><br><span class="line">1) <span class="string">&quot;jonyon&quot;</span></span><br><span class="line">2) <span class="string">&quot;adger&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; zcard salary         <span class="comment">#获取有序集合中的个数</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment">############################################################################################################     获取区间的成员数量</span></span><br><span class="line">127.0.0.1:6666&gt; zcount salary 1 2</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6666&gt; zcount salary 0 2500</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>排行榜应用实现、取TopN测试</p><h1 id="三种特殊数据类型"><a href="#三种特殊数据类型" class="headerlink" title="三种特殊数据类型"></a>三种特殊数据类型</h1><h2 id="geospatial-地理位置"><a href="#geospatial-地理位置" class="headerlink" title="geospatial(地理位置)"></a>geospatial(地理位置)</h2><p>朋友的定位、附近的人、打车距离计算</p><p>这个功能可以推算地理位置的信息，两地之间的距离，方圆几里的人</p><p>只有6个命令</p><p><img src="/2021/02/10/redis/image-20210201171435312.png" alt="image-20210201171435312"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#geoadd 添加add</span></span><br><span class="line"><span class="comment">#规则：两极（南极北极）无法添加，我们一般会下载城市数据、直接通过java程序一次性导入</span></span><br><span class="line"><span class="comment">#参数key 经度、纬度、名称</span></span><br><span class="line"><span class="comment">##########################################################################################################  </span></span><br><span class="line">127.0.0.1:6666&gt; geoadd china:city 116.40 39.90 beijing 121.47 31.23 shanghai 106.50 29.53 chongqing 114.05 22.52 shenzheng 120.16 30.24 hangzhou 108.96 34.26 xian</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6666&gt; geopos china:city chongqing</span><br><span class="line">1) 1) <span class="string">&quot;106.49999767541885376&quot;</span></span><br><span class="line">   2) <span class="string">&quot;29.52999957900659211&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; geopos china:city beijing</span><br><span class="line">1) 1) <span class="string">&quot;116.39999896287918091&quot;</span></span><br><span class="line">   2) <span class="string">&quot;39.90000009167092543&quot;</span></span><br><span class="line"><span class="comment">##########################################################################################################   获取指定程序的经度纬度，获取当前定位一定是一个坐标值 geopos</span></span><br><span class="line">127.0.0.1:6666&gt; geopos china:city beijing chongqing</span><br><span class="line">1) 1) <span class="string">&quot;116.39999896287918091&quot;</span></span><br><span class="line">   2) <span class="string">&quot;39.90000009167092543&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;106.49999767541885376&quot;</span></span><br><span class="line">   2) <span class="string">&quot;29.52999957900659211&quot;</span></span><br><span class="line"><span class="comment">##########################################################################################################    两人之间的距离 geodist</span></span><br><span class="line">127.0.0.1:6666&gt; geodist china:city beijing shanghai km</span><br><span class="line"><span class="string">&quot;1067.3788&quot;</span></span><br><span class="line"><span class="comment">########################################################################################################## georadius 以给定的经度为中心，找出某一半径内的元素</span></span><br><span class="line">127.0.0.1:6666&gt; GEORADIUS china:city 110 30 500 km</span><br><span class="line">1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">2) <span class="string">&quot;xian&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; GEORADIUS china:city 110 30 1000 km</span><br><span class="line">1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">2) <span class="string">&quot;xian&quot;</span></span><br><span class="line">3) <span class="string">&quot;shenzheng&quot;</span></span><br><span class="line">4) <span class="string">&quot;hangzhou&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; GEORADIUS china:city 110 30 1000 km withdist   <span class="comment">#跟上直线距离</span></span><br><span class="line">1) 1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">   2) <span class="string">&quot;341.9374&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;xian&quot;</span></span><br><span class="line">   2) <span class="string">&quot;483.8340&quot;</span></span><br><span class="line">3) 1) <span class="string">&quot;shenzheng&quot;</span></span><br><span class="line">   2) <span class="string">&quot;924.6408&quot;</span></span><br><span class="line">4) 1) <span class="string">&quot;hangzhou&quot;</span></span><br><span class="line">   2) <span class="string">&quot;977.5143&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; GEORADIUS china:city 110 30 1000 km withcoord   <span class="comment">#跟上经纬度</span></span><br><span class="line">1) 1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;106.49999767541885376&quot;</span></span><br><span class="line">      2) <span class="string">&quot;29.52999957900659211&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;xian&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;108.96000176668167114&quot;</span></span><br><span class="line">      2) <span class="string">&quot;34.25999964418929977&quot;</span></span><br><span class="line">3) 1) <span class="string">&quot;shenzheng&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;114.04999762773513794&quot;</span></span><br><span class="line">      2) <span class="string">&quot;22.5200000879503861&quot;</span></span><br><span class="line">4) 1) <span class="string">&quot;hangzhou&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;120.1600000262260437&quot;</span></span><br><span class="line">      2) <span class="string">&quot;30.2400003229490224&quot;</span></span><br><span class="line"><span class="comment">##########################################################################################################  GEORADIUSBYMEMBER  找出位于指定元素周围的其他元素</span></span><br><span class="line">127.0.0.1:6666&gt; GEORADIUSBYMEMBER china:city beijing 1000 km</span><br><span class="line">1) <span class="string">&quot;beijing&quot;</span></span><br><span class="line">2) <span class="string">&quot;xian&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; GEORADIUSBYMEMBER china:city xian 400 km</span><br><span class="line">1) <span class="string">&quot;xian&quot;</span></span><br><span class="line"><span class="comment">##########################################################################################################  geohash 该命令将返回11个字符的Geohash字符串 </span></span><br><span class="line">127.0.0.1:6666&gt; geohash china:city beijing chongqing   <span class="comment">#将二维的经纬度转换为一维的字符串，如果两个字符串越接近则距离越近</span></span><br><span class="line">1) <span class="string">&quot;wx4fbxxfke0&quot;</span></span><br><span class="line">2) <span class="string">&quot;wm5xzrybty0&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="geo底层实现原理其实就是zset-可以用zset命令来操作geo"><a href="#geo底层实现原理其实就是zset-可以用zset命令来操作geo" class="headerlink" title="geo底层实现原理其实就是zset,可以用zset命令来操作geo"></a>geo底层实现原理其实就是zset,可以用zset命令来操作geo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6666&gt; zrange china:city 0 -1</span><br><span class="line">1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">2) <span class="string">&quot;xian&quot;</span></span><br><span class="line">3) <span class="string">&quot;shenzheng&quot;</span></span><br><span class="line">4) <span class="string">&quot;hangzhou&quot;</span></span><br><span class="line">5) <span class="string">&quot;shanghai&quot;</span></span><br><span class="line">6) <span class="string">&quot;beijing&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; zrem china:city beijing</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; zrange china:city 0 -1</span><br><span class="line">1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">2) <span class="string">&quot;xian&quot;</span></span><br><span class="line">3) <span class="string">&quot;shenzheng&quot;</span></span><br><span class="line">4) <span class="string">&quot;hangzhou&quot;</span></span><br><span class="line">5) <span class="string">&quot;shanghai&quot;</span></span><br></pre></td></tr></table></figure><h2 id="hyperloglog-基数统计"><a href="#hyperloglog-基数统计" class="headerlink" title="hyperloglog(基数统计)"></a>hyperloglog(基数统计)</h2><p><strong>什么是基数</strong></p><blockquote><p>基数是指一个集合（这里的集合允许存在重复元素）中不同元素的个数。</p><p>这就类似“求一个数组中不重复元素的个数”的算法。如数组a[10] = {1，2，3，4，1，2，3，4，5，6，7}，那么不重复元素就是{1，2，3，4，5，6，7}，一共7个。</p><p>对于它的应用场景，比如一个网站要统计“一个人”的访问次数的时候，比如小明，那么就给对“小明”打上标记，当它下次来访问的时候，总访问次数不能加一。只有当不是“小明”的人，比如“小丽”来访问，对将总访问次数加一。</p></blockquote><p>Hyperloglog数据结构 基数统计的算法</p><p><strong>网页的UV（一个人访问网站多次，但是还是算作一个人）</strong></p><ul><li>传统的方式：set保存用户id，然后就可以统计set中的元素数量作为标准判断<ul><li>这个方式如果保存大量的用户id就会比较麻烦，我们的目的是为了计数，而不是保存用户id</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6666&gt; PFADD myloglog a b c d e f j      <span class="comment">#创建第一组元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; PFCOUNT myloglog                  <span class="comment">#统计第一组元素基数数量</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6666&gt; PFADD myloglog2 f j h i g k       <span class="comment">#创建第二组元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; PFCOUNT myloglog2                 <span class="comment">#统计第一组元素基数数量</span></span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6666&gt; PFMERGE myloglog3 myloglog myloglog2   <span class="comment">#合并两组</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; PFCOUNT myloglog3</span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br></pre></td></tr></table></figure><p>如果允许容错，那么一定可以使用Hyperloglog</p><p>如果不允许容错，就是用set或则自己的数据类型即可</p><h2 id="bitmap"><a href="#bitmap" class="headerlink" title="bitmap"></a>bitmap</h2><blockquote><p>位存储</p></blockquote><p>统计用户信息</p><ul><li>活跃、不活跃</li><li>登录、未登录</li><li>打卡、未打卡</li></ul><p>两个状态的，都可以使用bitmap</p><p>bitmap位图、数据结构。都是操作二进制位来进行记录，就只有0和1两个状态</p><p>365天=365bit  46字节左右</p><p>使用bitmap来记录周一到周日的打卡</p><p>周一：1   周二：0  周三：1  周四：0…</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6666&gt; setbit sign 0 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6666&gt; setbit sign 1 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6666&gt; setbit sign 2 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6666&gt; setbit sign 3 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6666&gt; setbit sign 4 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6666&gt; setbit sign 5 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6666&gt; setbit sign 6 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><p>查看某一天是否有打卡</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6666&gt; getbit sign 0</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; getbit sign 6</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><p>统计操作，统计打卡的天数（1的天数）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6666&gt; bitcount sign</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>Redis事物本质：一组命令的集合。一个事务中的所有命令都会被序列化，在事务执行的过程中，会按照事务执行。</p><p>一次性、顺序性、排它性</p><p><strong>Redis事务没有隔离级别的概念</strong></p><p>所有的命令在事务中并没有直接被执行，只有发起执行命令的时候才会执行，Exec</p><p><strong>Redis的单条命令是保证原子性的，但是事务不保证原子性</strong></p><p>Redis的事务</p><ul><li>开启事务（multi）</li><li>命令入队（….）</li><li>执行事务（exec）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6666&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; <span class="built_in">set</span> k1 v1       </span><br><span class="line">QUEUED                             <span class="comment">#命令入队</span></span><br><span class="line">127.0.0.1:6666&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6666&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6666&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6666&gt; mget k1 k2 k3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6666&gt; <span class="built_in">exec</span>                <span class="comment">#执行命令</span></span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) <span class="string">&quot;v2&quot;</span></span><br><span class="line">4) OK</span><br><span class="line">5) 1) <span class="string">&quot;v1&quot;</span></span><br><span class="line">   2) <span class="string">&quot;v2&quot;</span></span><br><span class="line">   3) <span class="string">&quot;v3&quot;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">############################################################################################################  放弃事务</span></span><br><span class="line">127.0.0.1:6666&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6666&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6666&gt; <span class="built_in">set</span> k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6666&gt; DISCARD        <span class="comment">#取消事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; get k4         <span class="comment">#事务队列中的命令都不会被执行</span></span><br><span class="line">(nil)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>编译型异常(代码有问题、命令有错)，事务中的命令不会被执行</p><ul><li><pre><code class="bash">127.0.0.1:6666&gt; multiOK127.0.0.1:6666&gt; set k1 v1QUEUED127.0.0.1:6666&gt; set k2 v2QUEUED127.0.0.1:6666&gt; set k3 v3QUEUED127.0.0.1:6666&gt; getset k3                           #错误的命令(error) ERR wrong number of arguments for &#39;getset&#39; command127.0.0.1:6666&gt; exec                                #执行事务报错(error) EXECABORT Transaction discarded because of previous errors.127.0.0.1:6666&gt; keys *                              #所有命令都不会执行(empty array)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 运行时异常(1&#x2F;0)，如果事务队列中存在语法性、那么执行命令的时候、其他命令是可以正常执行的、错误命令抛出异常</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;bash</span><br><span class="line">    127.0.0.1:6666&gt; set k1 v1</span><br><span class="line">    OK</span><br><span class="line">    127.0.0.1:6666&gt; multi</span><br><span class="line">    OK</span><br><span class="line">    127.0.0.1:6666&gt; incr k1</span><br><span class="line">    QUEUED</span><br><span class="line">    127.0.0.1:6666&gt; set k2 v2</span><br><span class="line">    QUEUED</span><br><span class="line">    127.0.0.1:6666&gt; set k3 v3</span><br><span class="line">    QUEUED</span><br><span class="line">    127.0.0.1:6666&gt; get k2</span><br><span class="line">    QUEUED</span><br><span class="line">    127.0.0.1:6666&gt; exec</span><br><span class="line">    1) (error) ERR value is not an integer or out of range</span><br><span class="line">    2) OK</span><br><span class="line">    3) OK</span><br><span class="line">    4) &quot;v2&quot;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><p>锁：Reids可以实现乐观锁</p><h2 id="监控Watch"><a href="#监控Watch" class="headerlink" title="监控Watch"></a>监控Watch</h2><p><strong>悲观锁：</strong></p><ul><li>很悲观，认为什么时候都有问题，无论做什么都会加锁</li></ul><p><strong>乐观锁：</strong></p><ul><li>很乐观，认为什么时候都不会出现问题，所以不会上锁。更新数据的时候去判断一下，在此期间是否有人修改过这个数据</li><li>获取version</li><li>更新的时候比较version</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#乐观锁正常执行成功</span></span><br><span class="line">127.0.0.1:6666&gt; <span class="built_in">set</span> get 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; <span class="built_in">set</span> out 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; <span class="built_in">set</span> money 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; <span class="built_in">set</span> out 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; watch money       <span class="comment">#监视money对象</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; multi             <span class="comment">#事务正常结束，数据期间没有发生变动，这个时候就正常执行成功</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; decrby money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6666&gt; incrby out 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6666&gt; <span class="built_in">exec</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 80</span><br><span class="line">2) (<span class="built_in">integer</span>) 20</span><br><span class="line"><span class="comment">#在事务执行的同时其它操作仍然在进行</span></span><br><span class="line">127.0.0.1:6666&gt; watch money</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; decrby money 20           <span class="comment">#同一时间 127.0.0.1:6666&gt; DECRBY money 20</span></span><br><span class="line">QUEUED                                                             (<span class="built_in">integer</span>) 60  </span><br><span class="line">127.0.0.1:6666&gt; incrby out 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6666&gt; <span class="built_in">exec</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 80</span><br><span class="line">2) (<span class="built_in">integer</span>) 20</span><br><span class="line">127.0.0.1:6666&gt; watch money       </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; DECRBY money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6666&gt; INCRBY out 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6666&gt; <span class="built_in">exec</span>                  <span class="comment">#执行之前，另外一个线程，修改了我们的值，就会导致事务执行失败</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><p><strong>如果监控失败，获取最新的值就好</strong></p><p><img src="/2021/02/10/redis/image-20210202211534981.png" alt="image-20210202211534981"></p><h1 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h1><p>我们要使用java来操作redis</p><blockquote><p>什么是Jedis</p><ul><li>官方推荐的java连接开发工具</li><li>使用java操作java的中间件</li><li>如果需要使用java操作redis，那么一定要对jedis十分熟悉</li></ul></blockquote><p>测试</p><ol><li><p>导入对应的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.75<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编码测试</p><ul><li>连接数据库</li><li>操作命令</li><li>断开连接</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试连接是否成功</span></span><br><span class="line"><span class="keyword">package</span> com.jonyon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;39.97.212.128&quot;</span>,<span class="number">6666</span>);</span><br><span class="line">        System.out.println(jedis.ping());    <span class="comment">//输出pong</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>部分命令测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jonyon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;39.97.212.128&quot;</span>,<span class="number">6666</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;清空数据：&quot;</span>+jedis.flushDB());</span><br><span class="line">        System.out.println(<span class="string">&quot;判断吧某个键是否存在：&quot;</span>+jedis.exists(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;新增用户键值对：&quot;</span>+jedis.set(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;jonyon&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;新增密码键值对：&quot;</span>+jedis.set(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>));</span><br><span class="line">        Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;系统中所有的键值对是：&quot;</span>+keys);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除键password:&quot;</span>+jedis.del(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;判断键password是否存在:&quot;</span>+jedis.exists(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;查看键username锁存储的值的类型:&quot;</span>+jedis.type(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;随机返回key空间的一个:&quot;</span>+jedis.randomKey());</span><br><span class="line">        System.out.println(<span class="string">&quot;重命名key:&quot;</span>+jedis.rename(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;按索引查询:&quot;</span>+jedis.select(<span class="number">0</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;删除当前选择数据库中的所有key:&quot;</span>+jedis.flushDB());</span><br><span class="line">        System.out.println(<span class="string">&quot;返回当前数据库中key的数目:&quot;</span>+jedis.dbSize());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">清空数据：OK</span><br><span class="line">判断吧某个键是否存在：<span class="keyword">false</span></span><br><span class="line">新增用户键值对：OK</span><br><span class="line">新增密码键值对：OK</span><br><span class="line">系统中所有的键值对是：[password, username]</span><br><span class="line">删除键password:<span class="number">1</span></span><br><span class="line">判断键password是否存在:<span class="keyword">false</span></span><br><span class="line">查看键username锁存储的值的类型:string</span><br><span class="line">随机返回key空间的一个:username</span><br><span class="line">重命名key:OK</span><br><span class="line">按索引查询:OK</span><br><span class="line">删除当前选择数据库中的所有key:OK</span><br><span class="line">返回当前数据库中key的数目:<span class="number">0</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jonyon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;39.97.212.128&quot;</span>,<span class="number">6666</span>);</span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;jonyon&quot;</span>);</span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        Transaction multi = jedis.multi();</span><br><span class="line">        String s = jsonObject.toJSONString();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            multi.set(<span class="string">&quot;user1&quot;</span>,s);</span><br><span class="line">            multi.set(<span class="string">&quot;user2&quot;</span>,s);</span><br><span class="line">            <span class="keyword">int</span> i=<span class="number">1</span>/<span class="number">0</span>;    <span class="comment">//代码抛出异常，事务执行失败</span></span><br><span class="line">            multi.exec();    <span class="comment">//执行事务</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            multi.discard(); <span class="comment">//放弃事务</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(jedis.get(<span class="string">&quot;user1&quot;</span>));</span><br><span class="line">            System.out.println(jedis.get(<span class="string">&quot;user2&quot;</span>));</span><br><span class="line">            jedis.close();       <span class="comment">//关闭连接</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="SpringBoot整合"><a href="#SpringBoot整合" class="headerlink" title="SpringBoot整合"></a>SpringBoot整合</h1><p>SpringBoot操作数据  ： Spring-data jpa jdbc mongodb redis</p><p>SpringData也是和SpringBoot齐名的项目</p><p>说明：在SpringBoot2.X之后，原来使用的jedis被替换为了lettuce</p><p>jedis：底层采用直连，多个线程操作的话是不安全的，如果想要避免不安全的，使用jedis pool连接池    更像 BIO模式</p><p>lettuce：底层采用Netty，实例可以在多个线程下共享，不存在线程不安全的情况，可以减少线程数据，更像  NIO模式</p><h2 id="整合测试"><a href="#整合测试" class="headerlink" title="整合测试"></a>整合测试</h2><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.joyon<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redis-springboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>redis-springboot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>配置连接</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">39.97</span><span class="number">.212</span><span class="number">.128</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6666</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.joyon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnection;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisSpringbootApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//redisTemplate.opsForList();   //操作list</span></span><br><span class="line">        <span class="comment">//redisTemplate.opsForValue();  //操作String</span></span><br><span class="line">        <span class="comment">//redisTemplate.opsForHash();   //操作hash</span></span><br><span class="line">        <span class="comment">//redisTemplate.opsForSet();    //操作set</span></span><br><span class="line">        <span class="comment">//redisTemplate.opsForZSet();   //操作zset...</span></span><br><span class="line">        <span class="comment">//获取redis的连接对象</span></span><br><span class="line">        <span class="comment">//RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span></span><br><span class="line">        <span class="comment">//connection.flushAll();</span></span><br><span class="line">        <span class="comment">//connection.flushDb();</span></span><br><span class="line">        <span class="comment">//connection.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/02/10/redis/image-20210202223422550.png" alt="image-20210202223422550"></p></li></ol><p><img src="/2021/02/10/redis/image-20210202223432941.png" alt="image-20210202223432941"></p><p>直接传递对象会报为序列化异常</p><p><img src="/2021/02/10/redis/image-20210203195420039.png" alt="image-20210203195420039"></p><h1 id="Redis-conf详解"><a href="#Redis-conf详解" class="headerlink" title="Redis.conf详解"></a>Redis.conf详解</h1><blockquote><p>单位</p></blockquote><p><img src="/2021/02/10/redis/image-20210206161655780.png" alt="image-20210206161655780"></p><ul><li>配置文件unit单位对大小写<strong>不敏感</strong></li></ul><blockquote><p>包含</p></blockquote><p><img src="/2021/02/10/redis/image-20210206161819864.png" alt="image-20210206161819864"></p><blockquote><p>网络</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span> 127.0.0.1    <span class="comment">#绑定的ip</span></span><br><span class="line">protected-mode    <span class="comment">#保护模式</span></span><br><span class="line">port 6379         <span class="comment">#端口设置</span></span><br></pre></td></tr></table></figure><blockquote><p>通用general</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes  <span class="comment">#以守护进程的方式运行，默认是no，我们需要自己开启为yes</span></span><br><span class="line">pidfile /var/run/redis_6379.pid <span class="comment">#如果以后台方式运行，我们就需要指定一个pid文件</span></span><br></pre></td></tr></table></figure><p>日志</p><p><img src="/2021/02/10/redis/image-20210206162327641.png" alt="image-20210206162327641"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logfile <span class="string">&quot;&quot;</span>  <span class="comment">#日志的文件生产名</span></span><br><span class="line">databases   <span class="comment">#数据库的数量默认是16个数据库</span></span><br><span class="line">always-show-logo yes  <span class="comment">#默认显示logo</span></span><br></pre></td></tr></table></figure><blockquote><p>快照</p></blockquote><p>持久化，在规定的时间内执行了多少次操作，则会持久化到文件  .rdb  .aof</p><p>redis是内存数据库，如果没有持久化，那么数据断电即失</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">save 900 1        <span class="comment">#900秒内如果至少有1个key进行了修改，那么我们就进行持久化操作</span></span><br><span class="line">save 300 10       <span class="comment">#300秒内如果至少有10个key进行了修改，那么我们就进行持久化操作</span></span><br><span class="line">save 60  10000    <span class="comment">#60秒内如果至少有10000个key进行了修改，那么我们就进行持久化操作</span></span><br><span class="line"></span><br><span class="line">stop-writes-on-bgsave-error yes <span class="comment">#持久化如果出错，是否还要继续工作</span></span><br><span class="line"></span><br><span class="line">rdbcompression yes <span class="comment">#是否压缩rdb文件，需要消耗一些cpu资源</span></span><br><span class="line"></span><br><span class="line">rdbchecksum yes    <span class="comment">#保存rdb文件的时候，进行错误的检测校验</span></span><br><span class="line"></span><br><span class="line">dir ./             <span class="comment">#rdb文件保存的目录</span></span><br></pre></td></tr></table></figure><blockquote><p>安全</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6666&gt; config get requirepass</span><br><span class="line">1) <span class="string">&quot;requirepass&quot;</span></span><br><span class="line">2) <span class="string">&quot;&quot;</span></span><br><span class="line">127.0.0.1:6666&gt; config <span class="built_in">set</span> requirepass <span class="string">&quot;123456&quot;</span> <span class="comment">#设置redis密码</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6666&gt; config get requirepass</span><br><span class="line">1) <span class="string">&quot;requirepass&quot;</span></span><br><span class="line">2) <span class="string">&quot;123456&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/02/10/redis/image-20210206163931411.png" alt="image-20210206163931411"></p><blockquote><p>限制CLIENTS</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">maxclients 10000  <span class="comment">#设置能连接上redis的最大客户端数量</span></span><br><span class="line">maxmemory &lt;bytes&gt; <span class="comment">#redis配置最大的内存容量 </span></span><br><span class="line">maxmemory-policy noeviction <span class="comment">#内存到达上限之后的处理策略</span></span><br><span class="line">1、volatile-lru：只对设置了过期时间的key进行LRU（默认值） </span><br><span class="line">2、allkeys-lru ： 删除lru算法的key   </span><br><span class="line">3、volatile-random：随机删除即将过期key   </span><br><span class="line">4、allkeys-random：随机删除   </span><br><span class="line">5、volatile-ttl ： 删除即将过期的   </span><br><span class="line">6、noeviction ： 永不过期，返回错误</span><br></pre></td></tr></table></figure><blockquote><p>APPEND ONLY 模式  aof配置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">appendonly no <span class="comment">#默认不开启aof模式，默认使用rdb持久化的，在大部分情况下，rdb完全够用</span></span><br><span class="line">appendfilename “appendonly.aof”  <span class="comment">#持久化的文件的名字</span></span><br><span class="line"><span class="comment">#appendfsync always     #每次修改都会sync(同步)，消耗性能</span></span><br><span class="line">appendfsync everysec    <span class="comment">#每秒执行一次sync，可能会丢失这一秒的数据</span></span><br><span class="line"><span class="comment">#appendfsync no         #不执行sync，这个时候操作系统自己同步数据，速度最快</span></span><br></pre></td></tr></table></figure><h1 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h1><blockquote><p>Redis是内存数据库，如果不将内存中的数据库状态保存到磁盘，那么一旦服务器进程退出，服务器中的数据库状态也会消失，所以Redis提供了持久化功能</p></blockquote><h2 id="RDB-Redis-Database"><a href="#RDB-Redis-Database" class="headerlink" title="RDB(Redis Database)"></a>RDB(Redis Database)</h2><blockquote><p>什么是RDB</p></blockquote><p><img src="/2021/02/10/redis/image-20210206170015526.png" alt="image-20210206170015526"></p><p><img src="/2021/02/10/redis/image-20210206170640050.png" alt="image-20210206170640050"></p><p>RDB保存的文件是dump.rdb 都是在我们的配置文件中进行配置的</p><p><img src="/2021/02/10/redis/image-20210206170726410.png" alt="image-20210206170726410"></p><p>触发机制</p><ul><li>save的规则满足的情况下，会自动触发rdb规则</li><li>执行flushall命令，也会触发我们的edb规则</li><li>退出reids，也会产生rdb文件</li></ul><p>备份就会自动生成一个dump.rdb文件</p><p><img src="/2021/02/10/redis/image-20210206171708550.png" alt="image-20210206171708550"></p><blockquote><p>如何恢复rdb文件</p></blockquote><ul><li><p>只需要将rdb文件放在我们redis启动目录就可以，redis启动的时候会自动检查dump.rdb恢复其中的数据</p></li><li><p>查看需要存在的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6666&gt; config get dir</span><br><span class="line">1) <span class="string">&quot;dir&quot;</span></span><br><span class="line">2) <span class="string">&quot;/data&quot;</span>   <span class="comment">#如果在这个目录下存在dump.rdb文件，启动就会自动恢复其中的数据</span></span><br></pre></td></tr></table></figure></li></ul><p>优点：</p><ul><li>适合大规模的数据恢复</li><li>对数据的完整性要求不高</li></ul><p>缺点：</p><ul><li>需要一定的时间间隔进程操作，如果redis宕机了，这个最后一次修改数据就没有了</li><li>fork进程的时候，会占用一定的内存空间</li></ul><h2 id="AOF-Append-Only-File"><a href="#AOF-Append-Only-File" class="headerlink" title="AOF(Append Only File)"></a>AOF(Append Only File)</h2><blockquote><p>将我们的所有命令都记录下来，相当于history，恢复的时候就把这个文件全部执行一遍</p></blockquote><p><img src="/2021/02/10/redis/image-20210206174321626.png" alt="image-20210206174321626"></p><p><img src="/2021/02/10/redis/image-20210206174409138.png" alt="image-20210206174409138"></p><p><strong>AOF保存的文件是appendonly.aof文件</strong></p><p><img src="/2021/02/10/redis/image-20210206174512461.png" alt="image-20210206174512461"></p><p>默认是不开启的，我们需要手动进行配置，把no改为yes</p><p>如果aof文件有错误，这时候redis是无法启动的，我们需要修复这个aof文件</p><p>redis给我们提供了一个工具—&gt;<strong>redis-check-aof</strong> –fix appendonly.aof</p><p><img src="/2021/02/10/redis/image-20210206175621219.png" alt="image-20210206175621219"></p><p>优点：</p><ul><li>每一次修改都同步，文件的完整性更加好</li><li>每秒同步一次，可能会丢失一秒的数据</li><li>从不同步，效率最高</li></ul><p>缺点：</p><ul><li>相对于数据文件来说，aof远大于rdb，修复速度也比rdb慢</li><li>aof运行效率也要比rdb慢，所以我们redis默认的配置就是rdb持久化</li></ul><h1 id="Redis发布订阅"><a href="#Redis发布订阅" class="headerlink" title="Redis发布订阅"></a>Redis发布订阅</h1><p>Redis发布订阅（pub/sub）是一种消息通信模式：发送者（pub）发布消息，订阅者（sub）接收消息</p><p>Redis客户端可以订阅任意数量的频道</p><p>订阅/发布消息图</p><p>第一个：消息发送者  第二个：频道  第三个：消息订阅者</p><p><img src="/2021/02/10/redis/image-20210210121535607.png" alt="image-20210210121535607"></p><p><img src="/2021/02/10/redis/image-20210210122008450.png" alt="image-20210210122008450"></p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p><img src="/2021/02/10/redis/image-20210210122153367.png" alt="image-20210210122153367"></p><p>订阅端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6666&gt; SUBSCRIBE jonyon</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;jonyon&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;jonyon&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello,jonyon&quot;</span></span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;jonyon&quot;</span></span><br><span class="line">3) <span class="string">&quot;bye,jonyon&quot;</span></span><br></pre></td></tr></table></figure><p>发送端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6666&gt; PUBLISH jonyon <span class="string">&quot;hello,jonyon&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6666&gt; PUBLISH jonyon <span class="string">&quot;bye,jonyon&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="/2021/02/10/redis/image-20210210172831223.png" alt="image-20210210172831223"></p><h1 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><img src="/2021/02/10/redis/image-20210210174956431.png" alt="image-20210210174956431"></p><p>对于这种场景，我们可以使用如下这种架构：</p><p><img src="/2021/02/10/redis/image-20210210175400947.png" alt="image-20210210175400947"></p><p>主从复制，读写分离，80%的情况下都是在进行读写操作，减缓服务器的压力。架构中经常使用一主二从</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>只配置从库，不用配置主库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6666&gt; info replication    <span class="comment">#查看当前库的信息</span></span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master                         <span class="comment">#角色：master</span></span><br><span class="line">connected_slaves:0                  <span class="comment">#没有从机</span></span><br><span class="line">master_replid:d81f74b76b44e71d16c9b21fd2dd060669e81ef3</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure><p>redis集群：使用docker启动三个redis</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]<span class="comment"># docker run -d -p 6667:6379 redis</span></span><br><span class="line">d4fe18ec3ccf625cf0fabb481138f734f51a03663b4b4823a8f1ceb290fd48c4</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]<span class="comment"># docker run -d -p 6668:6379 redis</span></span><br><span class="line">a5adf8a98ac6193bb1f93c452baf3d0aeaa1be9200e0d5da9ea9bf8eee63c901</span><br></pre></td></tr></table></figure><h2 id="一主二从"><a href="#一主二从" class="headerlink" title="一主二从"></a>一主二从</h2><p><strong>默认情况下，每台redis服务器都是主节点</strong>：我们一般情况下只用配置从机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置两台从机</span></span><br><span class="line">127.0.0.1:6667&gt; SLAVEOF 39.97.212.128 6666</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6667&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave                             <span class="comment">#当前角色是从机</span></span><br><span class="line">master_host:39.97.212.128</span><br><span class="line">master_port:6666</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:8</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:70</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:36c75a084ec9e0ce94a2cb0a4bbb2f44290a3772</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:70</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:71</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6668&gt; SLAVEOF 39.97.212.128 6666</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6668&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:39.97.212.128</span><br><span class="line">master_port:6666</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:0</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:42</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:36c75a084ec9e0ce94a2cb0a4bbb2f44290a3772</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:42</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:42</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#主机信息</span></span><br><span class="line">127.0.0.1:6666&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2                                                 <span class="comment">#有两个从机</span></span><br><span class="line">slave0:ip=39.97.212.128,port=6379,state=online,offset=84,lag=0     <span class="comment">#从机的ip地址，端口信息</span></span><br><span class="line">slave1:ip=39.97.212.128,port=6379,state=online,offset=84,lag=0</span><br><span class="line">master_replid:36c75a084ec9e0ce94a2cb0a4bbb2f44290a3772</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:84</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:84</span><br></pre></td></tr></table></figure><p>真实的主从配置应该在配置文件中配置，这样的话是永久的；使用命令是暂时的</p><p><strong>细节</strong></p><ul><li>主机可以写，从机不能写只能读。（主机写，从机读）</li><li>主机中的所有信息。都可以被从机保存</li><li>主机断开连接，从机依旧连接到主机，但是没有写操作；如果主机回来了，从机依旧可以直接获取到主机写的信息</li><li>如果是使用命令行来配置的主从关系，这个时候如果从机重启了，从机就会变回主机。只要再次变为从机，就可以再次从主机里面得到值</li></ul><p><strong>复制原理</strong></p><p><img src="/2021/02/10/redis/image-20210210202105168.png" alt="image-20210210202105168"></p><p><strong>层层链路</strong></p><p>上一个M连接下一个S，S依旧无法写入</p><p><img src="/2021/02/10/redis/image-20210210202527893.png" alt="image-20210210202527893"></p><p>如果主机断开了连接，我们可以使用<strong>slaveof no one</strong>让自己变成主机。其他段节点就可以手动连接到最新的这个节点。如果这个时候原来的主机修复，则重新连接。（谋朝篡位手动版）</p><h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><p>（自动选举老大的模式）</p><p><strong>概述</strong></p><p><img src="/2021/02/10/redis/image-20210210203233190.png" alt="image-20210210203233190"></p><p><img src="/2021/02/10/redis/image-20210210203433296.png" alt="image-20210210203433296"></p><p><img src="/2021/02/10/redis/image-20210210203617403.png" alt="image-20210210203617403"></p><p><img src="/2021/02/10/redis/image-20210210203652216.png" alt="image-20210210203652216"></p><p>优点</p><ul><li>哨兵集群基于主从复制模式，所有的主从配置优点，他全都有</li><li>主从可以切换，故障可以转移，系统的可用性更好</li><li>哨兵模式就是主从模式的升级，手动到自动，更加健壮</li></ul><p>缺点</p><ul><li>redis不好在线扩容，集群容量一但上限，在线扩容就十分麻烦</li><li>实现哨兵模式的配置是十分麻烦的，里面又很多选择</li></ul><h1 id="Redis缓存穿透和雪崩"><a href="#Redis缓存穿透和雪崩" class="headerlink" title="Redis缓存穿透和雪崩"></a>Redis缓存穿透和雪崩</h1><p>服务的高可用问题</p><p><img src="/2021/02/10/redis/image-20210210205925505.png" alt="image-20210210205925505"></p><p><img src="/2021/02/10/redis/image-20210210210604787.png" alt="image-20210210210604787"></p><h2 id="缓存穿透（查不到）"><a href="#缓存穿透（查不到）" class="headerlink" title="缓存穿透（查不到）"></a>缓存穿透（查不到）</h2><p><strong>概念</strong></p><p><img src="/2021/02/10/redis/image-20210210205912919.png" alt="image-20210210205912919"></p><p><strong>解决方案</strong></p><p><img src="/2021/02/10/redis/image-20210210210823853.png" alt="image-20210210210823853"></p><p><img src="/2021/02/10/redis/image-20210210210843236.png" alt="image-20210210210843236"></p><p><img src="/2021/02/10/redis/image-20210210210917691.png" alt="image-20210210210917691"></p><h2 id="缓存击穿（量太大，缓存过期）"><a href="#缓存击穿（量太大，缓存过期）" class="headerlink" title="缓存击穿（量太大，缓存过期）"></a>缓存击穿（量太大，缓存过期）</h2><p>微博服务器宕机</p><p><strong>概念</strong></p><p><img src="/2021/02/10/redis/image-20210210211027043.png" alt="image-20210210211027043"></p><p><strong>解决方案</strong></p><p><img src="/2021/02/10/redis/image-20210210211218888.png" alt="image-20210210211218888"></p><p><img src="/2021/02/10/redis/image-20210210211442389.png" alt="image-20210210211442389"></p><p>、</p><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p><strong>概念</strong></p><p><img src="/2021/02/10/redis/image-20210210211606223.png" alt="image-20210210211606223"></p><p><img src="/2021/02/10/redis/image-20210210211626785.png" alt="image-20210210211626785"></p><p>双十一：停掉一些服务，保证主要的服务可用</p><p><strong>解决方案</strong></p><p><img src="/2021/02/10/redis/image-20210210211852028.png" alt="image-20210210211852028"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;NoSQL概述&quot;&gt;&lt;a href=&quot;#NoSQL概述&quot; class=&quot;headerlink&quot; title=&quot;NoSQL概述&quot;&gt;&lt;/a&gt;NoSQL概述&lt;/h1&gt;&lt;h2 id=&quot;为什么要用NoSQL&quot;&gt;&lt;a href=&quot;#为什么要用NoSQL&quot; class=&quot;headerlink&quot; title=&quot;为什么要用NoSQL&quot;&gt;&lt;/a&gt;为什么要用NoSQL&lt;/h2&gt;&lt;p&gt;现在是大数据时代，一般的数据库无法进行分析处理&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;单机MySQL年代&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/02/10/redis/image-20210130134059341.png&quot; alt=&quot;image-20210130134059341&quot;&gt;&lt;/p&gt;
&lt;p&gt;90年代，一个基本的网站访问量一般不会太大，单个数据库完全足够&lt;/p&gt;
&lt;p&gt;那个时候更多的是去使用静态网页html，服务器更本没有太大的压力&lt;/p&gt;
&lt;p&gt;在这种情况下，整个网站的瓶颈是什么&lt;/p&gt;
&lt;p&gt;1.数据量如果太大，一个机器放不下&lt;/p&gt;
&lt;p&gt;2.数据的索引，300万条数据，一定需要创建索引(B+Tree),一个机器内存放不下&lt;/p&gt;
&lt;p&gt;3.访问量，读写混合，一个服务器承受不了&lt;/p&gt;
&lt;p&gt;只要出现以上三个情况之一，那么就需要升级&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="中间件" scheme="http://www.jonyonwzj.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="NoSQL" scheme="http://www.jonyonwzj.top/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>容器数据卷</title>
    <link href="http://www.jonyonwzj.top/2020/12/12/%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/"/>
    <id>http://www.jonyonwzj.top/2020/12/12/%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/</id>
    <published>2020-12-12T09:16:44.000Z</published>
    <updated>2020-12-12T09:22:34.932Z</updated>
    
    <content type="html"><![CDATA[<h1 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h1><h2 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h2><p><strong>docker理念</strong>：将应用和环境打包成一个镜像</p><p>但是如果数据都在容器中，那么容器一删除，数据就会丢失。于是提出了新的需求：<strong>数据持久化</strong></p><a id="more"></a><p><strong>卷技术</strong>：容器之间可以有一个数据共享的技术，docker中产生的数据，同步到本地。也可说是目录的挂载，将容器内的目录，挂载到linux上</p><p><img src="/2020/12/12/%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/1-1.png" alt="image-20201212130911804"></p><p><strong>实现了容器的持久化和同步操作，容器间也是可以数据共享的</strong></p><h2 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h2><blockquote><p>方式一：直接使用命令来挂载</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 主机目录:容器内目录</span><br><span class="line"></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker run -it -v /home/ceshi:/home centos /bin/bash</span><br><span class="line">[root@cb221f836c64 /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@cb221f836c64 /]# exit</span><br><span class="line">exit</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# cd /home</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz home]# ls</span><br><span class="line">admin  ceshi  redis  test.java  www  wzj.java</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz home]# docker inspect cb221f836c64</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;cb221f836c6464ef069bcb1edbca50dc78da0f48431ba588a371653c69d7b643&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2020-12-12T05:22:33.030247139Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/bash&quot;,</span><br><span class="line">        &quot;Args&quot;: [],</span><br><span class="line">................</span><br><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;bind&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/home/ceshi&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;/home&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;rprivate&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2020/12/12/%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/1-2.png" alt="image-20201212132831017"></p><p>测试文件的同步（双向过程）：</p><p><img src="/2020/12/12/%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/1-3.png" alt="image-20201212134119025"></p><p>好处：以后修改只需要在本地修改即可，容器内会自动同步。</p><h3 id="MySql数据持久化问题"><a href="#MySql数据持久化问题" class="headerlink" title="MySql数据持久化问题"></a>MySql数据持久化问题</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装启动mysqlMySql需要密码，到dockerhub官方文档上可以找到</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span></span><br><span class="line"></span><br><span class="line">docker run -d -p 3344:3306 -v /home/mysql/conf:/etc/mysql/conf -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line"><span class="meta">#</span><span class="bash">-d 后台运行</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-p 端口映射</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-v 卷挂载（如需要挂载多个可用多个-v）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-e 环境配置（此处配置mysql密码）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">--name 容器名字</span></span><br></pre></td></tr></table></figure><h3 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h3><h4 id="匿名挂载"><a href="#匿名挂载" class="headerlink" title="匿名挂载"></a>匿名挂载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">-v 容器内路径</span></span><br><span class="line">docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">-P 随机指定端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看所有volume的情况</span></span><br><span class="line">docker volume ls</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               216b7f301cc54025c33f83773027ff48001e02c59061e7c598ea9ffc74445b59</span><br><span class="line"><span class="meta">#</span><span class="bash">这就是匿名挂载，在-v只写了容器内部的路径，没有写容器外部的路径</span></span><br></pre></td></tr></table></figure><h4 id="具名挂载"><a href="#具名挂载" class="headerlink" title="具名挂载"></a>具名挂载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">-v 卷名:容器内路径</span></span><br><span class="line">docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">查看所有volume的情况</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               216b7f301cc54025c33f83773027ff48001e02c59061e7c598ea9ffc74445b59</span><br><span class="line">local               juming-nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">查看一下这个卷在哪里</span></span><br><span class="line">docker volume inspect juming-nginx</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker volume inspect juming-nginx</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;CreatedAt&quot;: &quot;2020-12-12T14:37:27+08:00&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Labels&quot;: null,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/juming-nginx/_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;juming-nginx&quot;,</span><br><span class="line">        &quot;Options&quot;: null,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>所有的docker容器内部的卷，没有指定目录的情况下都是在<code>/var/lib/docker/volumes/xxxx/_data</code></p><p>通过具名挂载可以方便的找到我们的一个卷，大多数情况使用<code>具名挂载</code></p><h4 id="如何确定是指定路径挂载、匿名挂载、具名挂载"><a href="#如何确定是指定路径挂载、匿名挂载、具名挂载" class="headerlink" title="如何确定是指定路径挂载、匿名挂载、具名挂载"></a>如何确定是指定路径挂载、匿名挂载、具名挂载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-v /宿主机路径:容器内路径       #指定路径挂载</span><br><span class="line">-v 容器内路径                 #匿名挂载</span><br><span class="line">-v 卷名:容器内路径             #具名挂载</span><br></pre></td></tr></table></figure><h4 id="ro和rw"><a href="#ro和rw" class="headerlink" title="ro和rw"></a>ro和rw</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ro readonly    #只读</span><br><span class="line">rw readwirte   #可读可写</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">通过-v 容器内路径:ro/rw 改变读写权限，设置后容器就会对挂载出来的内容有限定</span></span><br><span class="line">docker run -d -P --name nginx -v juming-nginx:/etc/nginx:ro nginx </span><br><span class="line">docker run -d -P --name nginx -v juming-nginx:/etc/nginx:rw nginx </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">ro 这个路径只能通过宿主机来操作，容器内部无法操作</span></span><br><span class="line"><span class="meta">#</span><span class="bash">rw 默认为rw，宿主机和容器都可进行操作</span></span><br></pre></td></tr></table></figure><h2 id="使用DockerFile"><a href="#使用DockerFile" class="headerlink" title="使用DockerFile"></a>使用DockerFile</h2><blockquote><p>方式二：构建镜像文件的时候直接进行挂载</p></blockquote><p>Dockerfile就是用来构建docker镜像的构建文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz home]# mkdir docker-test-volume</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz home]# ls</span><br><span class="line">admin  ceshi  docker-test-volume  mysql  redis  test.java  www  wzj.java</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz home]# cd docker-test-volume</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz docker-test-volume]# vim dockerfile1</span><br></pre></td></tr></table></figure><p><code>dockerfile1</code>:通过这个脚本可以生成镜像，镜像是一层一层的，而脚本是一个个的命令，每个命令都是一层</p><p>文件中的内容都是 指令（大写）+参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">VOLUME[&quot;volume01&quot;,&quot;volume02&quot;]</span><br><span class="line"></span><br><span class="line">CMD echo &quot;.....end.....&quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">这里的每个命令，就是镜像的一层</span></span><br><span class="line"></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz docker-test-volume]# cat dockerfile1</span><br><span class="line">FROM centos                                      #镜像</span><br><span class="line">VOLUME[&quot;volume01&quot;,&quot;volume02&quot;]                    #挂载（匿名挂载）</span><br><span class="line"></span><br><span class="line">CMD echo &quot;.....end.....&quot;                         #构建镜像成功打印 &quot;.....end.....&quot;  </span><br><span class="line">CMD /bin/bash                                    #默认进入/bin/bash  </span><br></pre></td></tr></table></figure><p><code>构建docker镜像</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz docker-test-volume]# docker build -f dockerfile1 -t jonyon/centos:1.0 .</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/4 : FROM centos                                         #镜像</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 300e315adb2f</span></span><br><span class="line">Step 2/4 : VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]                      #挂载（匿名挂载）</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> c9e28ce4daf5</span></span><br><span class="line">Removing intermediate container c9e28ce4daf5</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 8deb5deffaf3</span></span><br><span class="line">Step 3/4 : CMD echo &quot;.....end.....&quot;                            #输出文件内部命令</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 8f6a0781f409</span></span><br><span class="line">Removing intermediate container 8f6a0781f409</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 4f0e5be4d8fd</span></span><br><span class="line">Step 4/4 : CMD /bin/bash                                       #进入/bin/bash </span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> fc4657cbab76</span></span><br><span class="line">Removing intermediate container fc4657cbab76</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> c9531b9b79fd</span></span><br><span class="line">Successfully built c9531b9b79fd</span><br><span class="line">Successfully tagged jonyon/centos:1.0</span><br><span class="line"></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz docker-test-volume]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">jonyon/centos       1.0                 c9531b9b79fd        2 minutes ago       209MB</span><br></pre></td></tr></table></figure><p><code>启动自己的容器</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz docker-test-volume]# docker run -it c9531b9b79fd /bin/bash</span><br><span class="line">[root@a01086118f02 /]# ls -l</span><br><span class="line">total 56</span><br><span class="line">lrwxrwxrwx   1 root root    7 Nov  3 15:22 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x   5 root root  360 Dec 12 07:41 dev</span><br><span class="line">drwxr-xr-x   1 root root 4096 Dec 12 07:41 etc</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3 15:22 home</span><br><span class="line">lrwxrwxrwx   1 root root    7 Nov  3 15:22 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx   1 root root    9 Nov  3 15:22 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------   2 root root 4096 Dec  4 17:37 lost+found</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3 15:22 media</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3 15:22 mnt</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3 15:22 opt</span><br><span class="line">dr-xr-xr-x 107 root root    0 Dec 12 07:41 proc</span><br><span class="line">dr-xr-x---   2 root root 4096 Dec  4 17:37 root</span><br><span class="line">drwxr-xr-x  11 root root 4096 Dec  4 17:37 run</span><br><span class="line">lrwxrwxrwx   1 root root    8 Nov  3 15:22 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3 15:22 srv</span><br><span class="line">dr-xr-xr-x  13 root root    0 Dec 12 07:41 sys</span><br><span class="line">drwxrwxrwt   7 root root 4096 Dec  4 17:37 tmp</span><br><span class="line">drwxr-xr-x  12 root root 4096 Dec  4 17:37 usr</span><br><span class="line">drwxr-xr-x  20 root root 4096 Dec  4 17:37 var</span><br><span class="line"><span class="meta">#</span><span class="bash">这两个目录就是生成镜像的时候自动挂载的数据卷目录</span></span><br><span class="line">drwxr-xr-x   2 root root 4096 Dec 12 07:41 volume01               </span><br><span class="line">drwxr-xr-x   2 root root 4096 Dec 12 07:41 volume02</span><br></pre></td></tr></table></figure><p>volume01和volume02这两个卷和外部一定有一个同步的目录</p><p><img src="/2020/12/12/%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/1-4.png" alt="image-20201212154823142"></p><p><code>查看挂载卷的路径</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES</span><br><span class="line">a01086118f02        c9531b9b79fd        &quot;/bin/bash&quot;              12 minutes ago      Up 12 minutes</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker inspect a01086118f02</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;a01086118f02a901c48d5bceaa5139a6f79678ba11e6e260109cd0e97f9f7a99&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2020-12-12T07:41:31.340919688Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/bash&quot;,</span><br><span class="line">        &quot;Args&quot;: [],</span><br><span class="line">.............</span><br><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;728f846f5a10ab15df64c5d403983153afa2a67d3bc7edb8c00dc3c9d06cf473&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/728f846f5a10ab15df64c5d403983153afa2a67d3bc7edb8c00dc3c9d06cf473/_data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;volume01&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;bd059648f78709ba778fdb89c5ffa89b9ac99a4f240bb5a5f5b6dccedbc602b0&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/bd059648f78709ba778fdb89c5ffa89b9ac99a4f240bb5a5f5b6dccedbc602b0/_data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;volume02&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2020/12/12/%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/1-5.png" alt="image-20201212160036925"></p><p>这种方式未来使用的非常多，因为我们通常会自己构建自己的镜像。</p><p>假设构建镜像的时候没有挂载卷，需要手动挂载-v卷名：容器内路径</p><h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><p><img src="/2020/12/12/%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/1-6.png" alt="image-20201212162739759"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">jonyon/centos       1.0                 c9531b9b79fd        58 minutes ago      209MB</span><br><span class="line">mysql               5.7                 697daaecf703        15 hours ago        448MB</span><br><span class="line">nginx               latest              7baf28ea91eb        26 hours ago        133MB</span><br><span class="line">centos              latest              300e315adb2f        4 days ago          209MB</span><br><span class="line"><span class="meta">#</span><span class="bash">启动一个父容器</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker run -it --name docker01 jonyon/centos:1.0</span><br><span class="line">[root@35a2cc3dbfc9 /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  volume01volume02                             #volume01、volume02是数据卷</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">启动docker02，继承docker01</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker run -it --name docker02 --volumes-from docker01 jonyon/centos:1.0</span><br><span class="line">[root@00554ad98171 /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  volume01volume02</span><br></pre></td></tr></table></figure><p><code>测试</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在docker01的volume01中创建文件docker01</span></span><br><span class="line">[root@35a2cc3dbfc9 /]# cd volume01</span><br><span class="line">[root@35a2cc3dbfc9 volume01]# ls</span><br><span class="line">[root@35a2cc3dbfc9 volume01]# touch docker01</span><br><span class="line">[root@35a2cc3dbfc9 volume01]# ls</span><br><span class="line">docker01</span><br><span class="line"><span class="meta">#</span><span class="bash">docker02可以同步docker01，再在docker02中创建文件docker02</span></span><br><span class="line">[root@00554ad98171 /]# cd volume01</span><br><span class="line">[root@00554ad98171 volume01]# ls</span><br><span class="line">docker01</span><br><span class="line">[root@00554ad98171 volume01]# touch docker02</span><br><span class="line">[root@00554ad98171 volume01]# ls</span><br><span class="line">docker01  docker02</span><br><span class="line"><span class="meta">#</span><span class="bash">docker01中也同步了docker02</span></span><br><span class="line">[root@35a2cc3dbfc9 volume01]# ls</span><br><span class="line">docker01  docker02</span><br></pre></td></tr></table></figure><p><img src="/2020/12/12/%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/1-7.png" alt="image-20201212165126813"></p><p><code>docker01就是数据卷容器</code></p><p>再创建一个容器docker03 volumes-from docker01 也可以实现数据共享。</p><p>只要通过 <strong>–volumes-from</strong> 就可以实现数据共享了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">删除了docker01，依旧可以访问docker02，docker03中的docker01文件</span></span><br></pre></td></tr></table></figure><p><img src="/2020/12/12/%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/1-8.png" alt="image-20201212165914932"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">多个mysql实现数据共享</span></span><br><span class="line">docker run -d -p 3344:3306 -v /etc/mysql/conf -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line"></span><br><span class="line">docker run -d -p 3344:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --volumes-from mysql01 mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">这个时候，可以实现两个容器数据同步</span></span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>容器之间配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止（即删除所有的容器）</p><p>但是一旦持久化到了本地，本地的数据是不会被删除的</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;容器数据卷&quot;&gt;&lt;a href=&quot;#容器数据卷&quot; class=&quot;headerlink&quot; title=&quot;容器数据卷&quot;&gt;&lt;/a&gt;容器数据卷&lt;/h1&gt;&lt;h2 id=&quot;什么是容器数据卷&quot;&gt;&lt;a href=&quot;#什么是容器数据卷&quot; class=&quot;headerlink&quot; title=&quot;什么是容器数据卷&quot;&gt;&lt;/a&gt;什么是容器数据卷&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;docker理念&lt;/strong&gt;：将应用和环境打包成一个镜像&lt;/p&gt;
&lt;p&gt;但是如果数据都在容器中，那么容器一删除，数据就会丢失。于是提出了新的需求：&lt;strong&gt;数据持久化&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://www.jonyonwzj.top/categories/java/"/>
    
    
    <category term="Docker" scheme="http://www.jonyonwzj.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker镜像加载原理</title>
    <link href="http://www.jonyonwzj.top/2020/12/12/Docker%E9%95%9C%E5%83%8F%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86/"/>
    <id>http://www.jonyonwzj.top/2020/12/12/Docker%E9%95%9C%E5%83%8F%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86/</id>
    <published>2020-12-12T03:45:39.000Z</published>
    <updated>2021-03-31T15:24:15.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a>镜像是什么</h2><p>镜像是一种轻量级，可独立执行的软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的内容，包括代码、运行时，库、环境变量和配置文件</p><p>所有的应用，直接打包docker镜像，就可以运行起来</p><p>如何得到镜像</p><ul><li><p>从远程仓库下载</p></li><li><p>别人拷贝给你</p></li><li><p>自己制作一个DockerFile</p><a id="more"></a></li></ul><h2 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h2><h3 id="UnionFS-联合文件系统"><a href="#UnionFS-联合文件系统" class="headerlink" title="UnionFS(联合文件系统)"></a>UnionFS(联合文件系统)</h3><p>下载镜像的时候，一层一层的就是这个</p><p>联合文件系统：Union文件系统是一种分层、轻量级、并且高性能的文件系统、它支持对文件系统的修改作为一次提交来一层层叠加，同时可以将不同目录挂载到同一虚拟文件系统下。联合文件系统是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p>特性：一次同时加载多个文件系统，但从外面看起来。只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p><h3 id="Docker镜像加载原理-1"><a href="#Docker镜像加载原理-1" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h3><p>Docker的镜像实际上由一层一层文件系统组成，这种层级文件系统就是联合文件系统</p><p>bootfs（boot life system）主要包含bootloader和kernel，bootloader主要是引导加载kernel，linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的linux系统是一样的，包含boot加载的内核。当boot加载完成之后整个内核就都在内存中了。此时内存的使用已由bootfs转交给内核，此时系统也会卸载bootfs</p><p>rootfs在bootfs之上，包含的就是典型的linux系统中的/dev，/bin，/etc等标准目录和文件，rootfs就是各种不同的操作系统发行版，比如centos等等</p><p><img src="/2020/12/12/Docker%E9%95%9C%E5%83%8F%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86/1-1.png" alt="image-20201210150556417"></p><p>我们平时安装虚拟机的centos都是好几个g，为什么docker里才200M？</p><p>对于一个精简的os，rootfs可以小，只要包含最基本的命令，工具和程序库就可以，因为底层直接用Host和kernel，自己只需要提供rootfs就可以了。由此可见对于不同的linux发行版，bootfs基本是一致的，rootfs会有差别，因此不同的发行版可以公用bootfs</p><h2 id="分层理解"><a href="#分层理解" class="headerlink" title="分层理解"></a>分层理解</h2><p><strong>分层的镜像</strong></p><p>下载一个镜像，观察下载的日志输出，可以看到是一层一层在下载</p><p>为什么docker镜像要采用这种分层的结构呢？</p><p>因为可以进行资源共享。比如有多个镜像从相同的Base镜像构建而来，那么宿主机只需要在磁盘上保留一份Base镜像，同时内存中也只需要加载一份Base镜像，这样就可以为所有的容器服务了，而且镜像每一层都可以被共享。</p><p><strong>理解</strong></p><p>所有的Docker镜像都起始于一个基础镜像层，当进行修改或增加新的镜像层的时候，就会在当前镜像层之上，创建新的镜像层。</p><p><img src="/2020/12/12/Docker%E9%95%9C%E5%83%8F%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86/1-2.png" alt="image-20201210153321084"></p><p>在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合，理解这一点非常重要。下面这个例子，每个镜像层包含三个文件，而镜像包含了两个镜像层的6个文件。</p><p><img src="/2020/12/12/Docker%E9%95%9C%E5%83%8F%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86/1-3.png" alt="image-20201210153632361"></p><p>下图展示了一个稍微复杂的三层镜像，在外部看来整个镜像只有6个文件，这是因为最上层中的文件7是文件5的一个更新版本。</p><p><img src="/2020/12/12/Docker%E9%95%9C%E5%83%8F%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86/1-4.png" alt="image-20201210153808042"></p><p>上图镜像层中的文件覆盖了底层镜像层中的文件，这样就使得文件的更新版本作为一个新的镜像层添加到镜像中。</p><p>Docker通过存储引擎（新版本是采用快照机制）的方式来实现镜像层堆栈，并保证多镜像层对外展示为统一文件系统</p><p>下图展示了与系统显示相同的三层镜像。所有镜像层堆叠并合并，对外提供统一的视图。</p><p><img src="/2020/12/12/Docker%E9%95%9C%E5%83%8F%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86/1-5.png" alt="image-20201210154242853"></p><p><strong>特点</strong></p><p>Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部</p><p><strong>这一层就是我们通常所说的容器层，容器之下的都叫镜像层</strong></p><p><img src="/2020/12/12/Docker%E9%95%9C%E5%83%8F%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86/1-6.png" alt="image-20201210154456020"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;镜像是什么&quot;&gt;&lt;a href=&quot;#镜像是什么&quot; class=&quot;headerlink&quot; title=&quot;镜像是什么&quot;&gt;&lt;/a&gt;镜像是什么&lt;/h2&gt;&lt;p&gt;镜像是一种轻量级，可独立执行的软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的内容，包括代码、运行时，库、环境变量和配置文件&lt;/p&gt;
&lt;p&gt;所有的应用，直接打包docker镜像，就可以运行起来&lt;/p&gt;
&lt;p&gt;如何得到镜像&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;从远程仓库下载&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;别人拷贝给你&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自己制作一个DockerFile&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="运维" scheme="http://www.jonyonwzj.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="容器" scheme="http://www.jonyonwzj.top/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="http://www.jonyonwzj.top/2020/12/11/git/"/>
    <id>http://www.jonyonwzj.top/2020/12/11/git/</id>
    <published>2020-12-11T08:31:39.000Z</published>
    <updated>2020-12-11T08:34:26.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h1><p>git config –list</p><a id="more"></a><h1 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h1><p>git config –global user.name “”<br>git config –global user.email “”</p><h1 id="在本地初始化一个git仓库-此文件为隐藏文件夹"><a href="#在本地初始化一个git仓库-此文件为隐藏文件夹" class="headerlink" title="在本地初始化一个git仓库 (此文件为隐藏文件夹)#"></a>在本地初始化一个git仓库 (此文件为隐藏文件夹)#</h1><p>git init</p><h1 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h1><p>git clone 远程Git仓库地址</p><h1 id="工作目录、暂存区、-版本库概念"><a href="#工作目录、暂存区、-版本库概念" class="headerlink" title="工作目录、暂存区、 版本库概念#"></a>工作目录、暂存区、 版本库概念#</h1><p>版本库: .git隐藏文件<br>工作目录:包含.git文件夹的目录<br>暂存区: .git文件中的index文件</p><h1 id="git工作目录下文件的两种状态"><a href="#git工作目录下文件的两种状态" class="headerlink" title="git工作目录下文件的两种状态"></a>git工作目录下文件的两种状态</h1><p>untracked 未跟踪(未被纳入版本控制)<br>tracked 已跟踪(被纳入版本控制)<br> Unmodified 未修改状态<br> Modified 修改状态<br> Staged 已暂存状态</p><hr><h1 id="本地仓库操作"><a href="#本地仓库操作" class="headerlink" title="本地仓库操作"></a>本地仓库操作</h1><h2 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h2><p>git status<br>git status -s (使输出信息更加简洁)</p><h2 id="将未跟踪文件加入暂存区"><a href="#将未跟踪文件加入暂存区" class="headerlink" title="将未跟踪文件加入暂存区"></a>将未跟踪文件加入暂存区</h2><p>git add hello.txt</p><h2 id="将暂存区的文件取消暂存"><a href="#将暂存区的文件取消暂存" class="headerlink" title="将暂存区的文件取消暂存"></a>将暂存区的文件取消暂存</h2><p>git reset hello.txt</p><h2 id="将暂存区的文件修改提交到仓库"><a href="#将暂存区的文件修改提交到仓库" class="headerlink" title="将暂存区的文件修改提交到仓库"></a>将暂存区的文件修改提交到仓库</h2><p>git commit -m “日志文件”</p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>git rm hello.txt(只删除了工作区的，把操作放到暂存区)<br>git commit -m “delete hello.txt”(提交到本地仓库,真正删除)<br>注:手动删除后文件会变为未跟踪状态，需要git add 加入暂存区后，git commit 提交文件修改状态到仓库</p><h2 id="忽略列表"><a href="#忽略列表" class="headerlink" title="忽略列表"></a>忽略列表</h2><p>touch .gitignore 创建一个.gitignore文件列出要忽略的文件模式</p><p><em>.a   (以.a结尾的文件忽略不进行管理)<br>!lib.a    (lib.a除外)<br>/todo (tode文件忽略)<br>build/ (build目录下所有文件忽略)<br>doc/</em>.txt (忽略doc目录下所有的txt文件)<br>doc/*<em>/</em>.pdf (忽略doc目录下包含子目录下的所有pdf文件)</p><h2 id="查看日志信息"><a href="#查看日志信息" class="headerlink" title="查看日志信息"></a>查看日志信息</h2><p>git log</p><hr><h1 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h1><h2 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h2><p>git remote<br>git remote -v<br>git remote show origin(显示详细信息)</p><h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><p>git remote add 仓库名(一般叫origin) 地址</p><h2 id="移除无效远程仓库"><a href="#移除无效远程仓库" class="headerlink" title="移除无效远程仓库"></a>移除无效远程仓库</h2><p>git remote rm 仓库名 (只是从本地移除远程仓库的记录，并不会真正影响到远程仓库)</p><h2 id="从远程仓库抓取或拉取"><a href="#从远程仓库抓取或拉取" class="headerlink" title="从远程仓库抓取或拉取"></a>从远程仓库抓取或拉取</h2><p>git fitch是从远程仓库获取最新版本到本地仓库，不会自动merge(合并)<br>git merge origin/master(合并origin/master分支)</p><p>git pull是从远程仓库获取最新版本到本地仓库，会自动merge(合并)<br>git pull origin master –allow-unrelated-histories(强行拉取)</p><h2 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h2><p>git push origin master</p><hr><h1 id="git分支"><a href="#git分支" class="headerlink" title="git分支"></a>git分支</h1><h2 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h2><p>git branch 列出所有本地分支<br>git branch -r 列出所有远程分支<br>git branch -a 列出所有本地分支和远程分支</p><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><p>git branch 分支名称(b1)</p><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><p>git checkout 分支名称(b1)</p><h2 id="推送至远程仓库分支"><a href="#推送至远程仓库分支" class="headerlink" title="推送至远程仓库分支"></a>推送至远程仓库分支</h2><p>git push origin 分支名称(b1)</p><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><p>git merge 分支名称b1</p><p>有时候合并操作不会如此顺利，如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，git就没办法合并他们，<br>同时会提示文件冲突。此时我们需要打开冲突的文件并修复冲突的内容，最后执行git add命令来标识冲突已解决。</p><h2 id="推送到远程仓库-1"><a href="#推送到远程仓库-1" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h2><p>git push origin 分支名称(master)<br>git push origin 分支名称(b1)</p><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><p>git branch -d 分支名称(b1)<br>git branch -D 分支名称(b1)   (强制删除)</p><h2 id="删除远程仓库的分支"><a href="#删除远程仓库的分支" class="headerlink" title="删除远程仓库的分支"></a>删除远程仓库的分支</h2><p>git push origin -d 分支名称(b1)</p><hr><h1 id="git标签"><a href="#git标签" class="headerlink" title="git标签"></a>git标签</h1><h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><p>git tag 标签名（v1.0）</p><h2 id="列出已有的标签"><a href="#列出已有的标签" class="headerlink" title="列出已有的标签"></a>列出已有的标签</h2><p>git tag (列出所有tag)<br>git show 标签名（v1.0）</p><h2 id="将标签推送至远程仓库"><a href="#将标签推送至远程仓库" class="headerlink" title="将标签推送至远程仓库"></a>将标签推送至远程仓库</h2><p>git push 远程仓库名(origin) 标签名（v1.0）</p><h2 id="检出标签"><a href="#检出标签" class="headerlink" title="检出标签"></a>检出标签</h2><p>git checkout -b 分支名称(b2) 标签名(v1.0)  创建新的分支b2状态为v1.0的状态</p><h2 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h2><p>git tag -d 标签名(v1.0)    删除本地标签<br>git push origin:refs/tags/标签名     删除远程标签</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;查看配置信息&quot;&gt;&lt;a href=&quot;#查看配置信息&quot; class=&quot;headerlink&quot; title=&quot;查看配置信息&quot;&gt;&lt;/a&gt;查看配置信息&lt;/h1&gt;&lt;p&gt;git config –list&lt;/p&gt;</summary>
    
    
    
    
    <category term="git" scheme="http://www.jonyonwzj.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>谈谈final、finally、finalize有什么不同</title>
    <link href="http://www.jonyonwzj.top/2020/12/10/%E8%B0%88%E8%B0%88final%E3%80%81finally%E3%80%81finalize%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C/"/>
    <id>http://www.jonyonwzj.top/2020/12/10/%E8%B0%88%E8%B0%88final%E3%80%81finally%E3%80%81finalize%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C/</id>
    <published>2020-12-10T12:59:13.000Z</published>
    <updated>2020-12-10T13:10:40.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a>典型回答</h1><p>final（修饰词）：适合用来在语义方面标识当前的方法、变量、类不可以更改，适合封装一些代码，让用的人知道这些不要随意更改。<strong>final</strong>标识的变量不等于不可变，对于变量而言这个变量只是不能够再赋值，但是可以做任何增删改查操作。所以从这方面来讲，final在高并发下面的数据一致性起到积极作用，对性能比较好。</p><a id="more"></a><p>要想写一个不可变的对象（immutable）：</p><p>首先对象和类的成员都是private和final；</p><p>其次对象的赋值不要直接赋值，而是采用<strong>深拷贝</strong>；</p><p>对象不要随意实现setter（）方法；</p><p>在获取当前对象或状态的时候要遵守<strong>copy or write**</strong>原则**，创建私有的copy。</p><p>finally（基础类）：保证重点代码一定要被执行的<strong>一种机制</strong>，在一些资源处理关闭时用到，使用try-finally，try-catch-finally来进行类似关闭JDBC，保证unlock锁等动作，对于try catch最好即关即用。更推荐使用java7中添加的try-with-resources语句。</p><blockquote><p>try-with-resources（语法糖）：</p><p>try-with-resources会自动关闭try（）中的资源，并且将先关闭后声明的资源。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">列几个 fianlly 不会被执行的情况:</span><br><span class="line"><span class="number">1.</span> <span class="keyword">try</span>-cach 异常退出。</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">system.exit(<span class="number">1</span>)</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">print(abc)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 无限循环</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(ture)&#123;</span><br><span class="line">    print(abc)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">print(abc)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 线程被杀死</span><br><span class="line">当执行 <span class="keyword">try</span>，<span class="keyword">finally</span> 的线程被杀死时。<span class="keyword">finally</span> 也无法执行。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">总结</span><br><span class="line"><span class="number">1</span>，不要在 <span class="keyword">finally</span> 中使用 <span class="keyword">return</span> 语句。</span><br><span class="line"><span class="number">2</span>，<span class="keyword">finally</span> 总是执行，除非程序或者线程被中断。</span><br></pre></td></tr></table></figure><p>finalize(基础类)：java虚拟机在实现GC（垃圾回收）时调用的方法，理论上是进行内存回收等操作的地方。但实际上这个方法调用时机并不固定，有可能处理不当导致程序异常。并且finalize源码实现使用了try catch，但是并没有抛出异常，而是生吞。所以要是在这里面处理逻辑，自己都不知道哪里出了问题。<strong>finalize**</strong>机制**已经不推荐使用，并且在JDK9被标记为deprecated.（目前在逐步使用Cleaner来替换掉原有的finalize实现）</p><h1 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h1><p>这两个概念的区别就是“当在给一个变量赋值的时候是否直接使用这个值的内存地址”</p><p>例如：</p><p>基础类型都是值传递，所以浅拷贝过来的对象赋值后不会影响之前被拷贝的对象。</p><p>但是对于引用类型的变量，在拷贝的时候就需要考虑了，如果你要使新的对象的赋值不会影响之前被拷贝的对象，就要用深拷贝，否则就是copy的内存地址。</p><p>一个类实现拷贝的功能很简单，有两种方式：</p><p>1.实现Clone接口，在clone方法里面进行拷贝</p><p>2.要是实现序列化，先把对象写到输入流里面，然后再读出来对象，这样就是一个新的对象了。</p><h1 id="Copy-or-write"><a href="#Copy-or-write" class="headerlink" title="Copy or write"></a>Copy or write</h1><p>Copy or write：保证只有一个专门的线程往里面写；可以有多个线程读取，这样能保证线程同步。</p><p>Copy or wirte原则核心思想：有线程使用容器中的数据时，如果是写入，则复制出一个新容器，修改新容器中的数据后，再将引用指向新容器。如果是读操作则正常读引用地址中的容器数据。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;典型回答&quot;&gt;&lt;a href=&quot;#典型回答&quot; class=&quot;headerlink&quot; title=&quot;典型回答&quot;&gt;&lt;/a&gt;典型回答&lt;/h1&gt;&lt;p&gt;final（修饰词）：适合用来在语义方面标识当前的方法、变量、类不可以更改，适合封装一些代码，让用的人知道这些不要随意更改。&lt;strong&gt;final&lt;/strong&gt;标识的变量不等于不可变，对于变量而言这个变量只是不能够再赋值，但是可以做任何增删改查操作。所以从这方面来讲，final在高并发下面的数据一致性起到积极作用，对性能比较好。&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://www.jonyonwzj.top/categories/java/"/>
    
    
    <category term="Java面试基础" scheme="http://www.jonyonwzj.top/tags/Java%E9%9D%A2%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Docker的常用命令</title>
    <link href="http://www.jonyonwzj.top/2020/12/09/Docker%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.jonyonwzj.top/2020/12/09/Docker%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2020-12-09T09:54:30.000Z</published>
    <updated>2020-12-09T09:58:04.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker的常用命令"><a href="#Docker的常用命令" class="headerlink" title="Docker的常用命令"></a>Docker的常用命令</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version  #显示docker的版本信息</span><br><span class="line">docker info    #显示docker的系统信息，包括镜像和容器的数量</span><br><span class="line">docker --help  #万能命令 帮助命令</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><p><strong>docker images</strong> 查看所有本地主机上的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              bf756fb1ae65        11 months ago       13.3kB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">解释</span></span><br><span class="line">REPOSITORY  镜像仓库源</span><br><span class="line">TAG         标签</span><br><span class="line">IMAGE ID    id</span><br><span class="line">CREATED     创建时间</span><br><span class="line">SIZE        大小</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">可选项</span></span><br><span class="line">Options:</span><br><span class="line">  -a, --all             #列出所有镜像</span><br><span class="line">  -q, --quiet           #只显示镜像的id</span><br></pre></td></tr></table></figure><p><strong>docker search</strong>搜索镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker search mysql</span><br><span class="line">NAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   10247               [OK]                </span><br><span class="line">mariadb                           MariaDB is a community-developed fork of MyS…   3785                [OK]                </span><br><span class="line"><span class="meta">#</span><span class="bash">STARS 收藏数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">可选项，通过收藏来过滤</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker search mysql  --filter=STARS=3000  #瘦素出来的镜像收藏大于3000的</span><br><span class="line">NAME                DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mysql               MySQL is a widely used, open-source relation…   10247               [OK]                </span><br><span class="line">mariadb             MariaDB is a community-developed fork of MyS…   3785                [OK]  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>docker pull</strong>下载镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载镜像 docker pull 镜像名[:tag]</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker pull mysql</span><br><span class="line">Using default tag: latest  #如果不写tag，默认就是lates</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">852e50cd189d: Pull complete  #分层下载，docker image的核心联合文件</span><br><span class="line">29969ddb0ffb: Pull complete </span><br><span class="line">a43f41a44c48: Pull complete </span><br><span class="line">5cdd802543a3: Pull complete </span><br><span class="line">b79b040de953: Pull complete </span><br><span class="line">938c64119969: Pull complete </span><br><span class="line">7689ec51a0d9: Pull complete </span><br><span class="line">a880ba7c411f: Pull complete </span><br><span class="line">984f656ec6ca: Pull complete </span><br><span class="line">9f497bce458a: Pull complete </span><br><span class="line">b9940f97694b: Pull complete </span><br><span class="line">2f069358dc96: Pull complete </span><br><span class="line">Digest: sha256:4bb2e81a40e9d0d59bd8e3dc2ba5e1f2197696f6de39a91e90798dd27299b093 #签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest  #真实地址</span><br><span class="line"><span class="meta">#</span><span class="bash">docker pull mysql 等价于 docker pull docker.io/library/mysql:latest</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">指定版本下载</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">852e50cd189d: Already exists #不下载重复文件</span><br><span class="line">29969ddb0ffb: Already exists </span><br><span class="line">a43f41a44c48: Already exists </span><br><span class="line">5cdd802543a3: Already exists </span><br><span class="line">b79b040de953: Already exists </span><br><span class="line">938c64119969: Already exists </span><br><span class="line">7689ec51a0d9: Already exists </span><br><span class="line">36bd6224d58f: Pull complete </span><br><span class="line">cab9d3fa4c8c: Pull complete </span><br><span class="line">1b741e1c47de: Pull complete </span><br><span class="line">aac9d11987ac: Pull complete </span><br><span class="line">Digest: sha256:8e2004f9fe43df06c3030090f593021a5f283d028b5ed5765cc24236c2c4d88e</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br></pre></td></tr></table></figure><p><strong>docker rmi</strong>删除镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">rmi:remove image</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">删除指定的镜像</span></span><br><span class="line">docker rmi -f 镜像id</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker rmi -f ae0658fdbad5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">删除多个镜像</span></span><br><span class="line">docker rmi -f 镜像id 镜像id 镜像id   </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">删除全部镜像</span></span><br><span class="line">docker rmi -f $(docker images -aq)</span><br></pre></td></tr></table></figure><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p><strong>有了镜像才可以创建容器,linux,下载一个centOS来测试学习</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><p><strong>新建容器并使用</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">docker run[可选参数] 镜像名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">参数说明</span></span><br><span class="line">--name=&quot;Name&quot;    容器名字 --tomcat01,tomcat02来区分容器</span><br><span class="line">-d               后台方式运行</span><br><span class="line">-it              使用交互方式运行,进入容器查看内容  i是交互，t是伪终端，两者通常同时使用</span><br><span class="line">-p               指定容器的端口,进入容器查看内容</span><br><span class="line">    -p ip:主机端口:容器端口</span><br><span class="line">    -p 主机端口:容器端口</span><br><span class="line">    -p 容器端口</span><br><span class="line">    容器端口</span><br><span class="line">-P               随机指定端口</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">新建启动并进入容器</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@82f74728d9db /]# ls                      #容器内部的centos,内部的centos和外部的centos没有关系,很多命令是不完善的</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"><span class="meta">#</span><span class="bash">从容器中退出</span></span><br><span class="line">[root@82f74728d9db /]# exit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p><strong>列出所有运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">docker ps命令</span></span><br><span class="line">    #列出正在运行的容器</span><br><span class="line"> -a #列出正在运行的容器+历史运行过的容器</span><br><span class="line"> -n=? #显示最近创建的容器</span><br><span class="line"> -q #只显示容器的编号</span><br><span class="line"></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker ps               #正在运行的容器</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker ps -a            #运行过的容器</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                          PORTS               NAMES</span><br><span class="line">82f74728d9db        centos              &quot;/bin/bash&quot;         4 minutes ago       Exited (0) About a minute ago                       objective_haslett</span><br><span class="line">bce4aec829a4        bf756fb1ae65        &quot;/hello&quot;            2 hours ago         Exited (0) 2 hours ago                              sleepy_mcnulty</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>退出容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit #容器停止并退出</span><br><span class="line">Ctrl+p+q #容器不停止退出</span><br></pre></td></tr></table></figure><p><strong>删除容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id                  #删除指定容器,不能删除正在运行的容器,如果要强制删除  rm-f</span><br><span class="line">docker rm -f $(docker ps -aq)    #删除所有的容器</span><br><span class="line">docker ps -a -q|xargs docker rm  #删除所有的容器</span><br></pre></td></tr></table></figure><p><strong>启动和停止容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id       #启动容器</span><br><span class="line">docker restart 容器id     #重启容器</span><br><span class="line">docker stop 容器id        #停止当前正在运行容器</span><br><span class="line">docker kill 容器id        #强制停止当前容器</span><br></pre></td></tr></table></figure><h2 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h2><p><strong>后台启动容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">docker run -d 镜像名</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker run -d centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">问题:执行docker ps,发现后台停止了</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">常见的坑:docker容器使用后台运行,就必须要有一个前台进程,docker返现没有应用,就会自动停止</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Nginx:容器启动后,发现自己没有提供服务,就会立刻停止,就是没有程序了</span></span><br></pre></td></tr></table></figure><p><strong>查看日志</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker logs -tf --tail  容器,没有日志</span><br><span class="line"><span class="meta">#</span><span class="bash">自己编写一段shell脚本</span></span><br><span class="line">docker run -d centos /bin/sh -c &quot;while true;do echo wzj;sleep 1;done&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示日志</span></span><br><span class="line">docker logs -tf --tail 10 容器id</span><br><span class="line">-f 动态打印内容,先打印10条,后面继续打印</span><br><span class="line">-t 打印时间戳+内容,只打印10条</span><br><span class="line">-tf 动态打印时间戳+内容,先打印10条,后面继续打印</span><br></pre></td></tr></table></figure><p><strong>查看容器中的进程信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令 docker top 容器id</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker top 61aefd99735b</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                10447               10423               0                   14:03               ?                   00:00:00            /bin/sh -c while true;do echo wzj;sleep 1;done</span><br><span class="line">root                11444               10447               0                   14:10               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>查看镜像的元数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令  docker inspect 容器id</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker inspect 61aefd99735b</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;61aefd99735ba514d489686897c1aedd42565403ab6250db9b9dd1ba0b1e3d04&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2020-12-09T06:03:00.62604644Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/sh&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;-c&quot;,</span><br><span class="line">            &quot;while true;do echo wzj;sleep 1;done&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">            &quot;Running&quot;: true,</span><br><span class="line">            &quot;Paused&quot;: false,</span><br><span class="line">            &quot;Restarting&quot;: false,</span><br><span class="line">            &quot;OOMKilled&quot;: false,</span><br><span class="line">            &quot;Dead&quot;: false,</span><br><span class="line">            &quot;Pid&quot;: 10447,</span><br><span class="line">            &quot;ExitCode&quot;: 0,</span><br><span class="line">            &quot;Error&quot;: &quot;&quot;,</span><br><span class="line">            &quot;StartedAt&quot;: &quot;2020-12-09T06:03:00.967666729Z&quot;,</span><br><span class="line">            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Image&quot;: &quot;sha256:300e315adb2f96afe5f0b2780b87f28ae95231fe3bdd1e16b9ba606307728f55&quot;,</span><br><span class="line">        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/61aefd99735ba514d489686897c1aedd42565403ab6250db9b9dd1ba0b1e3d04/resolv.conf&quot;,</span><br><span class="line">        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/61aefd99735ba514d489686897c1aedd42565403ab6250db9b9dd1ba0b1e3d04/hostname&quot;,</span><br><span class="line">        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/61aefd99735ba514d489686897c1aedd42565403ab6250db9b9dd1ba0b1e3d04/hosts&quot;,</span><br><span class="line">        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/61aefd99735ba514d489686897c1aedd42565403ab6250db9b9dd1ba0b1e3d04/61aefd99735ba514d489686897c1aedd42565403ab6250db9b9dd1ba0b1e3d04-json.log&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;/sharp_colden&quot;,</span><br><span class="line">        &quot;RestartCount&quot;: 0,</span><br><span class="line">        &quot;Driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">        &quot;Platform&quot;: &quot;linux&quot;,</span><br><span class="line">        &quot;MountLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ProcessLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;AppArmorProfile&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ExecIDs&quot;: null,</span><br><span class="line">        &quot;HostConfig&quot;: &#123;</span><br><span class="line">            &quot;Binds&quot;: null,</span><br><span class="line">            &quot;ContainerIDFile&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LogConfig&quot;: &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;json-file&quot;,</span><br><span class="line">                &quot;Config&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;NetworkMode&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;PortBindings&quot;: &#123;&#125;,</span><br><span class="line">            &quot;RestartPolicy&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;no&quot;,</span><br><span class="line">                &quot;MaximumRetryCount&quot;: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;AutoRemove&quot;: false,</span><br><span class="line">            &quot;VolumeDriver&quot;: &quot;&quot;,</span><br><span class="line">            &quot;VolumesFrom&quot;: null,</span><br><span class="line">            &quot;CapAdd&quot;: null,</span><br><span class="line">            &quot;CapDrop&quot;: null,</span><br><span class="line">            &quot;Capabilities&quot;: null,</span><br><span class="line">            &quot;Dns&quot;: [],</span><br><span class="line">            &quot;DnsOptions&quot;: [],</span><br><span class="line">            &quot;DnsSearch&quot;: [],</span><br><span class="line">            &quot;ExtraHosts&quot;: null,</span><br><span class="line">            &quot;GroupAdd&quot;: null,</span><br><span class="line">            &quot;IpcMode&quot;: &quot;private&quot;,</span><br><span class="line">            &quot;Cgroup&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Links&quot;: null,</span><br><span class="line">            &quot;OomScoreAdj&quot;: 0,</span><br><span class="line">            &quot;PidMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Privileged&quot;: false,</span><br><span class="line">            &quot;PublishAllPorts&quot;: false,</span><br><span class="line">            &quot;ReadonlyRootfs&quot;: false,</span><br><span class="line">            &quot;SecurityOpt&quot;: null,</span><br><span class="line">            &quot;UTSMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;UsernsMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;ShmSize&quot;: 67108864,</span><br><span class="line">            &quot;Runtime&quot;: &quot;runc&quot;,</span><br><span class="line">            &quot;ConsoleSize&quot;: [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            &quot;Isolation&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpuShares&quot;: 0,</span><br><span class="line">            &quot;Memory&quot;: 0,</span><br><span class="line">            &quot;NanoCpus&quot;: 0,</span><br><span class="line">            &quot;CgroupParent&quot;: &quot;&quot;,</span><br><span class="line">            &quot;BlkioWeight&quot;: 0,</span><br><span class="line">            &quot;BlkioWeightDevice&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceReadBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceReadIOps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteIOps&quot;: null,</span><br><span class="line">            &quot;CpuPeriod&quot;: 0,</span><br><span class="line">            &quot;CpuQuota&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimePeriod&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimeRuntime&quot;: 0,</span><br><span class="line">            &quot;CpusetCpus&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpusetMems&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Devices&quot;: [],</span><br><span class="line">            &quot;DeviceCgroupRules&quot;: null,</span><br><span class="line">            &quot;DeviceRequests&quot;: null,</span><br><span class="line">            &quot;KernelMemory&quot;: 0,</span><br><span class="line">            &quot;KernelMemoryTCP&quot;: 0,</span><br><span class="line">            &quot;MemoryReservation&quot;: 0,</span><br><span class="line">            &quot;MemorySwap&quot;: 0,</span><br><span class="line">            &quot;MemorySwappiness&quot;: null,</span><br><span class="line">            &quot;OomKillDisable&quot;: false,</span><br><span class="line">            &quot;PidsLimit&quot;: null,</span><br><span class="line">            &quot;Ulimits&quot;: null,</span><br><span class="line">            &quot;CpuCount&quot;: 0,</span><br><span class="line">            &quot;CpuPercent&quot;: 0,</span><br><span class="line">            &quot;IOMaximumIOps&quot;: 0,</span><br><span class="line">            &quot;IOMaximumBandwidth&quot;: 0,</span><br><span class="line">            &quot;MaskedPaths&quot;: [</span><br><span class="line">                &quot;/proc/asound&quot;,</span><br><span class="line">                &quot;/proc/acpi&quot;,</span><br><span class="line">                &quot;/proc/kcore&quot;,</span><br><span class="line">                &quot;/proc/keys&quot;,</span><br><span class="line">                &quot;/proc/latency_stats&quot;,</span><br><span class="line">                &quot;/proc/timer_list&quot;,</span><br><span class="line">                &quot;/proc/timer_stats&quot;,</span><br><span class="line">                &quot;/proc/sched_debug&quot;,</span><br><span class="line">                &quot;/proc/scsi&quot;,</span><br><span class="line">                &quot;/sys/firmware&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;ReadonlyPaths&quot;: [</span><br><span class="line">                &quot;/proc/bus&quot;,</span><br><span class="line">                &quot;/proc/fs&quot;,</span><br><span class="line">                &quot;/proc/irq&quot;,</span><br><span class="line">                &quot;/proc/sys&quot;,</span><br><span class="line">                &quot;/proc/sysrq-trigger&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;GraphDriver&quot;: &#123;</span><br><span class="line">            &quot;Data&quot;: &#123;</span><br><span class="line">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/d82a3742a1536776a8ca12275a828d31d2aa577d9e7ccdeaa1e52823b368d5fd-init/diff:/var/lib/docker/overlay2/95dda4a69e01b60eaf2ce0ea310c41f2be953dd10d4a0716f6f4368e22dc1595/diff&quot;,</span><br><span class="line">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/d82a3742a1536776a8ca12275a828d31d2aa577d9e7ccdeaa1e52823b368d5fd/merged&quot;,</span><br><span class="line">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/d82a3742a1536776a8ca12275a828d31d2aa577d9e7ccdeaa1e52823b368d5fd/diff&quot;,</span><br><span class="line">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/d82a3742a1536776a8ca12275a828d31d2aa577d9e7ccdeaa1e52823b368d5fd/work&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Mounts&quot;: [],</span><br><span class="line">        &quot;Config&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;61aefd99735b&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;/bin/sh&quot;,</span><br><span class="line">                &quot;-c&quot;,</span><br><span class="line">                &quot;while true;do echo wzj;sleep 1;done&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Image&quot;: &quot;centos&quot;,</span><br><span class="line">            &quot;Volumes&quot;: null,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: null,</span><br><span class="line">            &quot;OnBuild&quot;: null,</span><br><span class="line">            &quot;Labels&quot;: &#123;</span><br><span class="line">                &quot;org.label-schema.build-date&quot;: &quot;20201204&quot;,</span><br><span class="line">                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,</span><br><span class="line">                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,</span><br><span class="line">                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,</span><br><span class="line">                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;NetworkSettings&quot;: &#123;</span><br><span class="line">            &quot;Bridge&quot;: &quot;&quot;,</span><br><span class="line">            &quot;SandboxID&quot;: &quot;eb5b89741e2e4fdb4c694f7e841ea4c9e8463c6cf30c3ca9756a0eee8636f220&quot;,</span><br><span class="line">            &quot;HairpinMode&quot;: false,</span><br><span class="line">            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LinkLocalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;Ports&quot;: &#123;&#125;,</span><br><span class="line">            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/eb5b89741e2e&quot;,</span><br><span class="line">            &quot;SecondaryIPAddresses&quot;: null,</span><br><span class="line">            &quot;SecondaryIPv6Addresses&quot;: null,</span><br><span class="line">            &quot;EndpointID&quot;: &quot;44576319715bea27fb66b2258585ac4d3e42eed35d92dbcf35810d1884fc663f&quot;,</span><br><span class="line">            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">            &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">            &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">            &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">            &quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;bridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: null,</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;86dff082c7cb9acb552b2acf9116e7d6290a6c301fab07f364ab877f8a0b8483&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;44576319715bea27fb66b2258585ac4d3e42eed35d92dbcf35810d1884fc663f&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>进入当前正在运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">我们通常容器都是使用后台方式运行的,需要进入容器,修改一些配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">方式一</span></span><br><span class="line">docker exec -it 容器id /bin/bash</span><br><span class="line"></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">61aefd99735b        centos              &quot;/bin/sh -c &#x27;while t…&quot;   16 minutes ago      Up 16 minutes                           sharp_colden</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker exec -it 61aefd99735b /bin/bash</span><br><span class="line">[root@61aefd99735b /]# ps -ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 06:03 ?        00:00:00 /bin/sh -c while true;do echo wzj;sleep 1;done</span><br><span class="line">root      1022     0  0 06:19 pts/0    00:00:00 /bin/bash</span><br><span class="line">root      1048     1  0 06:20 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br><span class="line">root      1049  1022  0 06:20 pts/0    00:00:00 ps -ef</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">方式二</span></span><br><span class="line">docker attach 容器id</span><br><span class="line">正在执行当前的带啊吗</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">区别</span></span><br><span class="line">docker exec     #进入容器后开启一个新的终端,可以在里面操作</span><br><span class="line">docker attach   #进入容器正在执行的新的终端,不会启动新的进程</span><br></pre></td></tr></table></figure><p><strong>从容器内拷贝文件到主机上</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器id:容器内路径 目的主机路径</span><br><span class="line"></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">centos              latest              300e315adb2f        30 hours ago        209MB</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@227c1c4d8d5c /]# [root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">227c1c4d8d5c        centos              &quot;/bin/bash&quot;         27 seconds ago      Up 27 seconds                           fervent_noether</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# cd /home</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz home]# ls</span><br><span class="line">admin  redis  www</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz home]# touch wzj.java</span><br><span class="line"><span class="meta">#</span><span class="bash">查看当前主机目录下</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz home]# ls</span><br><span class="line">admin  redis  www  wzj.java</span><br><span class="line"><span class="meta">#</span><span class="bash">进入docker容器内部</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz home]# docker attach 227c1c4d8d5c</span><br><span class="line">[root@227c1c4d8d5c /]# cd /home</span><br><span class="line">[root@227c1c4d8d5c home]# ls</span><br><span class="line"><span class="meta">#</span><span class="bash">在容器内新建一个文件</span></span><br><span class="line">[root@227c1c4d8d5c home]# touch test.java</span><br><span class="line">[root@227c1c4d8d5c home]# ls</span><br><span class="line">test.java</span><br><span class="line">[root@227c1c4d8d5c home]# exit</span><br><span class="line">exit</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz home]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line"><span class="meta">#</span><span class="bash">将文件拷贝出来到主机上</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz home]# docker cp 227c1c4d8d5c:/home/test.java /home</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz home]# ls</span><br><span class="line">admin  redis  test.java  www  wzj.java</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">拷贝是一个手动过程,未来我们使用-v卷的技术可以实现主机/home目录和容器/home目录连通</span></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">docker image                                                    #查看本地主机上所有的镜像</span><br><span class="line">docker image -q                                                 #查看本地主机上所有的镜像,只显示id</span><br><span class="line">docker search 镜像名                                             #搜索镜像</span><br><span class="line">docker search 镜像名 --filter=STARS=num                          #搜索收藏数大于镜像</span><br><span class="line">docker pull 镜像名                                               #下载镜像</span><br><span class="line">docker pull 镜像名:tag                                           #下载tag版本的镜像</span><br><span class="line">docker rmi 镜像id                                                #删除指定镜像</span><br><span class="line">docker rmi -f 镜像id 镜像id...                                    #删除多个镜像</span><br><span class="line">docker rmi -f $(docker images -aq)                              #删除全部镜像</span><br><span class="line">docker run -it 镜像名 /bin/bash                                  #使用交互方式运行，新建并启动容器</span><br><span class="line">docker ps                                                       #列出正在运行的容器</span><br><span class="line">docker ps -a                                                    #列出正在运行的容器和运行过的容器</span><br><span class="line">exit                                                            #容器停止并退出</span><br><span class="line">Ctrl+p+q                                                        #容器退出但不停止</span><br><span class="line">docker rm 容器id                                                 #删除指定容器</span><br><span class="line">docker rm -f $(docker ps -aq)                                   #删除所有容器</span><br><span class="line">docker rm -a -q|xargs docker rm                                 #删除所有容器</span><br><span class="line">docker start 容器id                                              #启动容器</span><br><span class="line">docker restart 容器id                                            #重启容器</span><br><span class="line">docker stop 容器id                                               #停止当前正在运行容器</span><br><span class="line">docker kill 容器id                                               #强制停止当前容器</span><br><span class="line">docker run -d 镜像名                                             #后台启动容器</span><br><span class="line">docker logs -tf --tail num id                                   #显示日志</span><br><span class="line">docker top 容器id                                                #查看容器中的进程信息</span><br><span class="line">docker inspect 容器id                                            #查看镜像的元数据</span><br><span class="line">docker exec -it 容器id /bin/bash                                 #进入当前正在运行的容器</span><br><span class="line">docker attach 容器id                                             #进入当前正在运行的容器</span><br><span class="line">docker cp 容器id:容器内路径 目的主机路径                             #从容器内拷贝文件到主机上</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Docker的常用命令&quot;&gt;&lt;a href=&quot;#Docker的常用命令&quot; class=&quot;headerlink&quot; title=&quot;Docker的常用命令&quot;&gt;&lt;/a&gt;Docker的常用命令&lt;/h1&gt;&lt;h2 id=&quot;帮助命令&quot;&gt;&lt;a href=&quot;#帮助命令&quot; class=&quot;headerlink&quot; title=&quot;帮助命令&quot;&gt;&lt;/a&gt;帮助命令&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker version  #显示docker的版本信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker info    #显示docker的系统信息，包括镜像和容器的数量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker --help  #万能命令 帮助命令&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="java" scheme="http://www.jonyonwzj.top/categories/java/"/>
    
    
    <category term="Docker" scheme="http://www.jonyonwzj.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>对比Exception和Erorr，运行时异常和一般异常由什么区别</title>
    <link href="http://www.jonyonwzj.top/2020/12/08/%E5%AF%B9%E6%AF%94Exception%E5%92%8CErorr%EF%BC%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8%E5%92%8C%E4%B8%80%E8%88%AC%E5%BC%82%E5%B8%B8%E7%94%B1%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.jonyonwzj.top/2020/12/08/%E5%AF%B9%E6%AF%94Exception%E5%92%8CErorr%EF%BC%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8%E5%92%8C%E4%B8%80%E8%88%AC%E5%BC%82%E5%B8%B8%E7%94%B1%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</id>
    <published>2020-12-08T13:13:15.000Z</published>
    <updated>2020-12-08T13:27:13.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答:"></a>典型回答:</h1><ul><li><p>Exception和Error都继承了Throwable类，在java中只有Throwable类型的实例才可以被抛出（throw）或捕获（catch）</p></li><li><p>Error：非正常情况下，不太可能出现的情况，绝大多数Error都会导致程序（比如JVM自身）处于非正常的，不可恢复的情况。因为是非正常的情况，所以不需要捕获。</p></li><li><p>Exception：程序正常运行中，可以预料的意外情况，并且应该被捕获，进行相应的处理。</p></li><li><p>Exception分为可检查异常和不可检查异常</p></li></ul><ol><li>可检查异常（非RuntimeException）：在源码里必须显式的进行捕获处理，这是编译检查期的一部分。</li><li>不可检查异常（RuntimeException）：运行时异常，通常可以通过编码避免的逻辑错误，具体根据需求判断是否需要捕获，不在编译期做具体要求。</li></ol><a id="more"></a><p><img src="/2020/12/08/%E5%AF%B9%E6%AF%94Exception%E5%92%8CErorr%EF%BC%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8%E5%92%8C%E4%B8%80%E8%88%AC%E5%BC%82%E5%B8%B8%E7%94%B1%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/1-1.png" alt="Trowable"></p><h1 id="throws和throw的区别："><a href="#throws和throw的区别：" class="headerlink" title="throws和throw的区别："></a>throws和throw的区别：</h1><ul><li>throw：语句抛出一个具体的异常类型，一般在代码块内部</li></ul><p><code>public static void testThrow(Integer i) &#123;</code></p><p><code>if (i     == null) &#123;</code></p><p>`throw     new NullPointerException();*//运行时异常不需要在方法上申明*``</p><p><code>&#125;</code></p><p><code>&#125;</code></p><ul><li>throws：声明一个方法可能产生的所有异常，不做任何处理而是将异常往上抛，谁调用我我就抛给谁</li></ul><p><code>public static void testThrows() throws NullPointerException &#123;</code></p><p><code>Integer i = null;</code></p><p><code>System.out.println(i + 1);</code></p><p><code>&#125;</code></p><h1 id="NoClassDefFoundError和ClassNotFoundException的区别"><a href="#NoClassDefFoundError和ClassNotFoundException的区别" class="headerlink" title="NoClassDefFoundError和ClassNotFoundException的区别"></a>NoClassDefFoundError和ClassNotFoundException的区别</h1><ul><li><p>NoClassDefFoundError:一个class在编译时存在，在运行时找不到class文件了。（javac已经成功把程序编译为字节码文件了，</p><p>当JVM进程启动，通过类加载器加载字节码文件，由JIT编译字节码指令时，在classpath下找不到相应的类进行加载）</p></li></ul><ul><li><p>ClassNotFoundException:使用类似Class.forName()方法时check Exception。（编码时编译器就能告诉你这个地方需要捕获异常，</p><p>使用Class.forName()时必须捕获或者throws这个异常）</p></li></ul><h1 id="异常处理的两个基本原则"><a href="#异常处理的两个基本原则" class="headerlink" title="异常处理的两个基本原则"></a>异常处理的两个基本原则</h1><p>1.尽量不要捕获Exception这样的通用异常，而是捕获特定异常；</p><p>2.不要生吞（swallow）异常：如果不把异常抛出来，或者输出到日志，程序可能在后续代码以不可控的方式结束，无法判断哪里出了异常</p><ul><li>很多人喜欢在catch中用e.printStackTrace打印异常信息，但在稍微复杂的系统中就会不知道异常现象输出在哪里.最好使用日志，详细的输出到日志中.</li></ul><p>StackTrace(堆栈轨迹)</p><p><code>try &#123;</code></p><p>  <code>// 业务代码</code></p><p>  <code>// …</code></p><p><code>&#125; catch (IOException e) &#123;</code></p><p>  <code>e.printStackTrace();</code></p><p><code>&#125;</code></p><h1 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h1><p>我们从性能角度来审视一下 Java 的异常处理机制，这里有两个可能会相对昂贵的地方：</p><p>1.try-catch 代码段会产生额外的性能开销，或者换个角度说，它往往会影响 JVM 对代码进行优化，所以建议仅捕获有必要的代码段，尽量不要一个大的 try 包住整段的代码；与此同时，利用异常控制代码流程，也不是一个好主意，远比我们通常意义上的条件语句（if/else、switch）要低效。</p><p>2.Java 每实例化一个 Exception，都会对当时的栈进行快照，这是一个相对比较重的操作。如果发生的非常频繁，这个开销可就不能被忽略了。</p><h2 id="稍微比喻一下"><a href="#稍微比喻一下" class="headerlink" title="稍微比喻一下"></a>稍微比喻一下</h2><p>开车上山，车坏了，拿出工具箱修一修，修好了，继续上路（Exception被捕获，从异常中恢复，继续程序的运行）</p><p>车坏了，自己不知道该怎么修，打电话告诉修车行，告诉他具体是什么问题，要车行过来修（不知道是什么样的逻辑，把异常跑出去到更高的业务层来处理），打电话时要描述的具体，不然修车行不知道你有什么问题（要捕获特定的异常，不能捕获Exception特定异常）</p><p>山塌了（Error）</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;典型回答&quot;&gt;&lt;a href=&quot;#典型回答&quot; class=&quot;headerlink&quot; title=&quot;典型回答:&quot;&gt;&lt;/a&gt;典型回答:&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Exception和Error都继承了Throwable类，在java中只有Throwable类型的实例才可以被抛出（throw）或捕获（catch）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Error：非正常情况下，不太可能出现的情况，绝大多数Error都会导致程序（比如JVM自身）处于非正常的，不可恢复的情况。因为是非正常的情况，所以不需要捕获。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Exception：程序正常运行中，可以预料的意外情况，并且应该被捕获，进行相应的处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Exception分为可检查异常和不可检查异常&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;可检查异常（非RuntimeException）：在源码里必须显式的进行捕获处理，这是编译检查期的一部分。&lt;/li&gt;
&lt;li&gt;不可检查异常（RuntimeException）：运行时异常，通常可以通过编码避免的逻辑错误，具体根据需求判断是否需要捕获，不在编译期做具体要求。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="java" scheme="http://www.jonyonwzj.top/categories/java/"/>
    
    
    <category term="Java面试基础" scheme="http://www.jonyonwzj.top/tags/Java%E9%9D%A2%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>谈谈自己对Java平台的理解,java是解释执行，这句话正确吗？</title>
    <link href="http://www.jonyonwzj.top/2020/12/07/%E8%B0%88%E8%B0%88%E8%87%AA%E5%B7%B1%E5%AF%B9Java%E5%B9%B3%E5%8F%B0%E7%9A%84%E7%90%86%E8%A7%A3-java%E6%98%AF%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%EF%BC%8C%E8%BF%99%E5%8F%A5%E8%AF%9D%E6%AD%A3%E7%A1%AE%E5%90%97%EF%BC%9F/"/>
    <id>http://www.jonyonwzj.top/2020/12/07/%E8%B0%88%E8%B0%88%E8%87%AA%E5%B7%B1%E5%AF%B9Java%E5%B9%B3%E5%8F%B0%E7%9A%84%E7%90%86%E8%A7%A3-java%E6%98%AF%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%EF%BC%8C%E8%BF%99%E5%8F%A5%E8%AF%9D%E6%AD%A3%E7%A1%AE%E5%90%97%EF%BC%9F/</id>
    <published>2020-12-07T11:20:25.000Z</published>
    <updated>2020-12-08T13:11:37.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java是解释执行吗？"><a href="#Java是解释执行吗？" class="headerlink" title="Java是解释执行吗？"></a>Java是解释执行吗？</h1><p>不正确</p><p>1.java源代码经由javac编译为.CLASS字节码文件</p><p>2..CLASS文件经由JVM类加载器解释或编译运行</p><a id="more"></a><p>（1）解释：.CLASS文件经过JVM内嵌的解析器解释执行</p><p>（2）编译：存在JIT（即时编译器）</p><p>（3）AOT编译器：java9提供的直接将所有代码编译为机器语言</p><p><img src="/2020/12/07/%E8%B0%88%E8%B0%88%E8%87%AA%E5%B7%B1%E5%AF%B9Java%E5%B9%B3%E5%8F%B0%E7%9A%84%E7%90%86%E8%A7%A3-java%E6%98%AF%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%EF%BC%8C%E8%BF%99%E5%8F%A5%E8%AF%9D%E6%AD%A3%E7%A1%AE%E5%90%97%EF%BC%9F/1-1.png" alt="关于JAVA平台"></p><h1 id="对Java平台的理解"><a href="#对Java平台的理解" class="headerlink" title="对Java平台的理解"></a>对Java平台的理解</h1><p>说到java平台就不免想到java语言的跨平台特性，java语言的跨平台特性与java虚拟机的存在有着密不可分的关系，使java可以在不同环境中运行，比如说windows，linux平台都有相应的JDK，那么他们也就都有了java运行环境。java和其他编程语言没有特别大的差别，并不是说<strong>java可以跨平台，而是说不同的平台都有着可以让java语言运行的环境</strong>，所以才有了“一次编译，到处运行”。</p><p>严格来说，跨平台的语言不止java一种，但java是<strong>较为</strong>成熟的一种。</p><p>程序从源代码到运行有三个阶段：编码—编译—运行—调试，java是在<strong>编译</strong>阶段体现了跨平台的特性。</p><p>编译过程:</p><p>1.第一次编译：javac编译器将java源代码转化为.CLASS字节码文件</p><p>（.CLASS文件就是可以到处运行的文件）</p><p>2.第二次编译：java字节码会被转换成目标机器代码，由JVM类加载器加载字节码文件,通过解释器逐行解释执行，转换为最终的机器码</p><p>“到处运行”的关键就是JVM，因为在第二次编译中JVM起关键作用。在可以运行java虚拟机的地方都内含着一个JVM操作系统，从而使用java提供了各种不同平台上的虚拟机制。</p><p>强调：java不是编译机制，而是解释机制。java字节码的设计充分考虑了JIT这一即时编译方式，可以将字节码转换成高性能的本地机器码，这同样是虚拟机的一个构成部分。</p><p>第二次编译由JVM类加载器加载字节码文件这种方式执行速度较慢，有些方法和代码块是高频率调用的（热点代码）。所以引进JIT技术(运行时编译)，<strong>提前将这些字节码文件编译成本地机器码，类似于缓存技术，运行时再遇到这类代码可直接执行，而不是先解释后执行。</strong></p><p><img src="/2020/12/07/%E8%B0%88%E8%B0%88%E8%87%AA%E5%B7%B1%E5%AF%B9Java%E5%B9%B3%E5%8F%B0%E7%9A%84%E7%90%86%E8%A7%A3-java%E6%98%AF%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%EF%BC%8C%E8%BF%99%E5%8F%A5%E8%AF%9D%E6%AD%A3%E7%A1%AE%E5%90%97%EF%BC%9F/1-2.png" alt="对JAVA平台的理解"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Java是解释执行吗？&quot;&gt;&lt;a href=&quot;#Java是解释执行吗？&quot; class=&quot;headerlink&quot; title=&quot;Java是解释执行吗？&quot;&gt;&lt;/a&gt;Java是解释执行吗？&lt;/h1&gt;&lt;p&gt;不正确&lt;/p&gt;
&lt;p&gt;1.java源代码经由javac编译为.CLASS字节码文件&lt;/p&gt;
&lt;p&gt;2..CLASS文件经由JVM类加载器解释或编译运行&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://www.jonyonwzj.top/categories/java/"/>
    
    
    <category term="Java面试基础" scheme="http://www.jonyonwzj.top/tags/Java%E9%9D%A2%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.jonyonwzj.top/2020/12/05/hello-world/"/>
    <id>http://www.jonyonwzj.top/2020/12/05/hello-world/</id>
    <published>2020-12-05T09:57:22.844Z</published>
    <updated>2020-12-08T05:42:38.934Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br><span class="line">hexo new <span class="string">&quot;标题&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;center&gt;基本操作&lt;/center&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
