<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Joynoy&#39;s Blog</title>
  
  <subtitle>Learn something</subtitle>
  <link href="http://www.jonyonwzj.top/atom.xml" rel="self"/>
  
  <link href="http://www.jonyonwzj.top/"/>
  <updated>2020-12-12T09:22:00.219Z</updated>
  <id>http://www.jonyonwzj.top/</id>
  
  <author>
    <name>Zhengjie Wu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>容器数据卷</title>
    <link href="http://www.jonyonwzj.top/2020/12/12/%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/"/>
    <id>http://www.jonyonwzj.top/2020/12/12/%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/</id>
    <published>2020-12-12T09:16:44.000Z</published>
    <updated>2020-12-12T09:22:00.219Z</updated>
    
    <content type="html"><![CDATA[<h1 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h1><h2 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h2><p><strong>docker理念</strong>：将应用和环境打包成一个镜像</p><p>但是如果数据都在容器中，那么容器一删除，数据就会丢失。于是提出了新的需求：<strong>数据持久化</strong></p><p><strong>卷技术</strong>：容器之间可以有一个数据共享的技术，docker中产生的数据，同步到本地。也可说是目录的挂载，将容器内的目录，挂载到linux上</p><p><img src="/2020/12/12/%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/1-1.png" alt="image-20201212130911804"></p><p><strong>实现了容器的持久化和同步操作，容器间也是可以数据共享的</strong></p><h2 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h2><blockquote><p>方式一：直接使用命令来挂载</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 主机目录:容器内目录</span><br><span class="line"></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker run -it -v /home/ceshi:/home centos /bin/bash</span><br><span class="line">[root@cb221f836c64 /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@cb221f836c64 /]# exit</span><br><span class="line">exit</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# cd /home</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz home]# ls</span><br><span class="line">admin  ceshi  redis  test.java  www  wzj.java</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz home]# docker inspect cb221f836c64</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;cb221f836c6464ef069bcb1edbca50dc78da0f48431ba588a371653c69d7b643&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2020-12-12T05:22:33.030247139Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/bash&quot;,</span><br><span class="line">        &quot;Args&quot;: [],</span><br><span class="line">................</span><br><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;bind&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/home/ceshi&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;/home&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;rprivate&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2020/12/12/%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/1-2.png" alt="image-20201212132831017"></p><p>测试文件的同步（双向过程）：</p><p><img src="/2020/12/12/%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/1-3.png" alt="image-20201212134119025"></p><p>好处：以后修改只需要在本地修改即可，容器内会自动同步。</p><h3 id="MySql数据持久化问题"><a href="#MySql数据持久化问题" class="headerlink" title="MySql数据持久化问题"></a>MySql数据持久化问题</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装启动mysqlMySql需要密码，到dockerhub官方文档上可以找到</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span></span><br><span class="line"></span><br><span class="line">docker run -d -p 3344:3306 -v /home/mysql/conf:/etc/mysql/conf -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line"><span class="meta">#</span><span class="bash">-d 后台运行</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-p 端口映射</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-v 卷挂载（如需要挂载多个可用多个-v）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-e 环境配置（此处配置mysql密码）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">--name 容器名字</span></span><br></pre></td></tr></table></figure><h3 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h3><h4 id="匿名挂载"><a href="#匿名挂载" class="headerlink" title="匿名挂载"></a>匿名挂载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">-v 容器内路径</span></span><br><span class="line">docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">-P 随机指定端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看所有volume的情况</span></span><br><span class="line">docker volume ls</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               216b7f301cc54025c33f83773027ff48001e02c59061e7c598ea9ffc74445b59</span><br><span class="line"><span class="meta">#</span><span class="bash">这就是匿名挂载，在-v只写了容器内部的路径，没有写容器外部的路径</span></span><br></pre></td></tr></table></figure><h4 id="具名挂载"><a href="#具名挂载" class="headerlink" title="具名挂载"></a>具名挂载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">-v 卷名:容器内路径</span></span><br><span class="line">docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">查看所有volume的情况</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               216b7f301cc54025c33f83773027ff48001e02c59061e7c598ea9ffc74445b59</span><br><span class="line">local               juming-nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">查看一下这个卷在哪里</span></span><br><span class="line">docker volume inspect juming-nginx</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker volume inspect juming-nginx</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;CreatedAt&quot;: &quot;2020-12-12T14:37:27+08:00&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Labels&quot;: null,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/juming-nginx/_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;juming-nginx&quot;,</span><br><span class="line">        &quot;Options&quot;: null,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>所有的docker容器内部的卷，没有指定目录的情况下都是在<code>/var/lib/docker/volumes/xxxx/_data</code></p><p>通过具名挂载可以方便的找到我们的一个卷，大多数情况使用<code>具名挂载</code></p><h4 id="如何确定是指定路径挂载、匿名挂载、具名挂载"><a href="#如何确定是指定路径挂载、匿名挂载、具名挂载" class="headerlink" title="如何确定是指定路径挂载、匿名挂载、具名挂载"></a>如何确定是指定路径挂载、匿名挂载、具名挂载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-v /宿主机路径:容器内路径       #指定路径挂载</span><br><span class="line">-v 容器内路径                 #匿名挂载</span><br><span class="line">-v 卷名:容器内路径             #具名挂载</span><br></pre></td></tr></table></figure><h4 id="ro和rw"><a href="#ro和rw" class="headerlink" title="ro和rw"></a>ro和rw</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ro readonly    #只读</span><br><span class="line">rw readwirte   #可读可写</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">通过-v 容器内路径:ro/rw 改变读写权限，设置后容器就会对挂载出来的内容有限定</span></span><br><span class="line">docker run -d -P --name nginx -v juming-nginx:/etc/nginx:ro nginx </span><br><span class="line">docker run -d -P --name nginx -v juming-nginx:/etc/nginx:rw nginx </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">ro 这个路径只能通过宿主机来操作，容器内部无法操作</span></span><br><span class="line"><span class="meta">#</span><span class="bash">rw 默认为rw，宿主机和容器都可进行操作</span></span><br></pre></td></tr></table></figure><h2 id="使用DockerFile"><a href="#使用DockerFile" class="headerlink" title="使用DockerFile"></a>使用DockerFile</h2><blockquote><p>方式二：构建镜像文件的时候直接进行挂载</p></blockquote><p>Dockerfile就是用来构建docker镜像的构建文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz home]# mkdir docker-test-volume</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz home]# ls</span><br><span class="line">admin  ceshi  docker-test-volume  mysql  redis  test.java  www  wzj.java</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz home]# cd docker-test-volume</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz docker-test-volume]# vim dockerfile1</span><br></pre></td></tr></table></figure><p><code>dockerfile1</code>:通过这个脚本可以生成镜像，镜像是一层一层的，而脚本是一个个的命令，每个命令都是一层</p><p>文件中的内容都是 指令（大写）+参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">VOLUME[&quot;volume01&quot;,&quot;volume02&quot;]</span><br><span class="line"></span><br><span class="line">CMD echo &quot;.....end.....&quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">这里的每个命令，就是镜像的一层</span></span><br><span class="line"></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz docker-test-volume]# cat dockerfile1</span><br><span class="line">FROM centos                                      #镜像</span><br><span class="line">VOLUME[&quot;volume01&quot;,&quot;volume02&quot;]                    #挂载（匿名挂载）</span><br><span class="line"></span><br><span class="line">CMD echo &quot;.....end.....&quot;                         #构建镜像成功打印 &quot;.....end.....&quot;  </span><br><span class="line">CMD /bin/bash                                    #默认进入/bin/bash  </span><br></pre></td></tr></table></figure><p><code>构建docker镜像</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz docker-test-volume]# docker build -f dockerfile1 -t jonyon/centos:1.0 .</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/4 : FROM centos                                         #镜像</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 300e315adb2f</span></span><br><span class="line">Step 2/4 : VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]                      #挂载（匿名挂载）</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> c9e28ce4daf5</span></span><br><span class="line">Removing intermediate container c9e28ce4daf5</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 8deb5deffaf3</span></span><br><span class="line">Step 3/4 : CMD echo &quot;.....end.....&quot;                            #输出文件内部命令</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 8f6a0781f409</span></span><br><span class="line">Removing intermediate container 8f6a0781f409</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 4f0e5be4d8fd</span></span><br><span class="line">Step 4/4 : CMD /bin/bash                                       #进入/bin/bash </span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> fc4657cbab76</span></span><br><span class="line">Removing intermediate container fc4657cbab76</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> c9531b9b79fd</span></span><br><span class="line">Successfully built c9531b9b79fd</span><br><span class="line">Successfully tagged jonyon/centos:1.0</span><br><span class="line"></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz docker-test-volume]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">jonyon/centos       1.0                 c9531b9b79fd        2 minutes ago       209MB</span><br></pre></td></tr></table></figure><p><code>启动自己的容器</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz docker-test-volume]# docker run -it c9531b9b79fd /bin/bash</span><br><span class="line">[root@a01086118f02 /]# ls -l</span><br><span class="line">total 56</span><br><span class="line">lrwxrwxrwx   1 root root    7 Nov  3 15:22 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x   5 root root  360 Dec 12 07:41 dev</span><br><span class="line">drwxr-xr-x   1 root root 4096 Dec 12 07:41 etc</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3 15:22 home</span><br><span class="line">lrwxrwxrwx   1 root root    7 Nov  3 15:22 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx   1 root root    9 Nov  3 15:22 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------   2 root root 4096 Dec  4 17:37 lost+found</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3 15:22 media</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3 15:22 mnt</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3 15:22 opt</span><br><span class="line">dr-xr-xr-x 107 root root    0 Dec 12 07:41 proc</span><br><span class="line">dr-xr-x---   2 root root 4096 Dec  4 17:37 root</span><br><span class="line">drwxr-xr-x  11 root root 4096 Dec  4 17:37 run</span><br><span class="line">lrwxrwxrwx   1 root root    8 Nov  3 15:22 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3 15:22 srv</span><br><span class="line">dr-xr-xr-x  13 root root    0 Dec 12 07:41 sys</span><br><span class="line">drwxrwxrwt   7 root root 4096 Dec  4 17:37 tmp</span><br><span class="line">drwxr-xr-x  12 root root 4096 Dec  4 17:37 usr</span><br><span class="line">drwxr-xr-x  20 root root 4096 Dec  4 17:37 var</span><br><span class="line"><span class="meta">#</span><span class="bash">这两个目录就是生成镜像的时候自动挂载的数据卷目录</span></span><br><span class="line">drwxr-xr-x   2 root root 4096 Dec 12 07:41 volume01               </span><br><span class="line">drwxr-xr-x   2 root root 4096 Dec 12 07:41 volume02</span><br></pre></td></tr></table></figure><p>volume01和volume02这两个卷和外部一定有一个同步的目录</p><p><img src="/2020/12/12/%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/1-4.png" alt="image-20201212154823142"></p><p><code>查看挂载卷的路径</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES</span><br><span class="line">a01086118f02        c9531b9b79fd        &quot;/bin/bash&quot;              12 minutes ago      Up 12 minutes</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker inspect a01086118f02</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;a01086118f02a901c48d5bceaa5139a6f79678ba11e6e260109cd0e97f9f7a99&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2020-12-12T07:41:31.340919688Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/bash&quot;,</span><br><span class="line">        &quot;Args&quot;: [],</span><br><span class="line">.............</span><br><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;728f846f5a10ab15df64c5d403983153afa2a67d3bc7edb8c00dc3c9d06cf473&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/728f846f5a10ab15df64c5d403983153afa2a67d3bc7edb8c00dc3c9d06cf473/_data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;volume01&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;bd059648f78709ba778fdb89c5ffa89b9ac99a4f240bb5a5f5b6dccedbc602b0&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/bd059648f78709ba778fdb89c5ffa89b9ac99a4f240bb5a5f5b6dccedbc602b0/_data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;volume02&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2020/12/12/%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/1-5.png" alt="image-20201212160036925"></p><p>这种方式未来使用的非常多，因为我们通常会自己构建自己的镜像。</p><p>假设构建镜像的时候没有挂载卷，需要手动挂载-v卷名：容器内路径</p><h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><p><img src="/2020/12/12/%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/1-6.png" alt="image-20201212162739759"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">jonyon/centos       1.0                 c9531b9b79fd        58 minutes ago      209MB</span><br><span class="line">mysql               5.7                 697daaecf703        15 hours ago        448MB</span><br><span class="line">nginx               latest              7baf28ea91eb        26 hours ago        133MB</span><br><span class="line">centos              latest              300e315adb2f        4 days ago          209MB</span><br><span class="line"><span class="meta">#</span><span class="bash">启动一个父容器</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker run -it --name docker01 jonyon/centos:1.0</span><br><span class="line">[root@35a2cc3dbfc9 /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  volume01volume02                             #volume01、volume02是数据卷</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">启动docker02，继承docker01</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker run -it --name docker02 --volumes-from docker01 jonyon/centos:1.0</span><br><span class="line">[root@00554ad98171 /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  volume01volume02</span><br></pre></td></tr></table></figure><p><code>测试</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在docker01的volume01中创建文件docker01</span></span><br><span class="line">[root@35a2cc3dbfc9 /]# cd volume01</span><br><span class="line">[root@35a2cc3dbfc9 volume01]# ls</span><br><span class="line">[root@35a2cc3dbfc9 volume01]# touch docker01</span><br><span class="line">[root@35a2cc3dbfc9 volume01]# ls</span><br><span class="line">docker01</span><br><span class="line"><span class="meta">#</span><span class="bash">docker02可以同步docker01，再在docker02中创建文件docker02</span></span><br><span class="line">[root@00554ad98171 /]# cd volume01</span><br><span class="line">[root@00554ad98171 volume01]# ls</span><br><span class="line">docker01</span><br><span class="line">[root@00554ad98171 volume01]# touch docker02</span><br><span class="line">[root@00554ad98171 volume01]# ls</span><br><span class="line">docker01  docker02</span><br><span class="line"><span class="meta">#</span><span class="bash">docker01中也同步了docker02</span></span><br><span class="line">[root@35a2cc3dbfc9 volume01]# ls</span><br><span class="line">docker01  docker02</span><br></pre></td></tr></table></figure><p><img src="/2020/12/12/%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/1-7.png" alt="image-20201212165126813"></p><p><code>docker01就是数据卷容器</code></p><p>再创建一个容器docker03 volumes-from docker01 也可以实现数据共享。</p><p>只要通过 <strong>–volumes-from</strong> 就可以实现数据共享了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">删除了docker01，依旧可以访问docker02，docker03中的docker01文件</span></span><br></pre></td></tr></table></figure><p><img src="/2020/12/12/%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/1-8.png" alt="image-20201212165914932"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">多个mysql实现数据共享</span></span><br><span class="line">docker run -d -p 3344:3306 -v /etc/mysql/conf -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line"></span><br><span class="line">docker run -d -p 3344:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --volumes-from mysql01 mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">这个时候，可以实现两个容器数据同步</span></span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>容器之间配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止（即删除所有的容器）</p><p>但是一旦持久化到了本地，本地的数据是不会被删除的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;容器数据卷&quot;&gt;&lt;a href=&quot;#容器数据卷&quot; class=&quot;headerlink&quot; title=&quot;容器数据卷&quot;&gt;&lt;/a&gt;容器数据卷&lt;/h1&gt;&lt;h2 id=&quot;什么是容器数据卷&quot;&gt;&lt;a href=&quot;#什么是容器数据卷&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="java" scheme="http://www.jonyonwzj.top/categories/java/"/>
    
    
    <category term="Docker" scheme="http://www.jonyonwzj.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker镜像加载原理</title>
    <link href="http://www.jonyonwzj.top/2020/12/12/Docker%E9%95%9C%E5%83%8F%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86/"/>
    <id>http://www.jonyonwzj.top/2020/12/12/Docker%E9%95%9C%E5%83%8F%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86/</id>
    <published>2020-12-12T03:45:39.000Z</published>
    <updated>2020-12-12T03:53:44.738Z</updated>
    
    <content type="html"><![CDATA[<h2 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a>镜像是什么</h2><p>镜像是一种轻量级，可独立执行的软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的内容，包括代码、运行时，库、环境变量和配置文件</p><p>所有的应用，直接打包docker镜像，就可以运行起来</p><p>如何得到镜像</p><ul><li><p>从远程仓库下载</p></li><li><p>别人拷贝给你</p></li><li><p>自己制作一个DockerFile</p><a id="more"></a></li></ul><h2 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h2><h3 id="UnionFS-联合文件系统"><a href="#UnionFS-联合文件系统" class="headerlink" title="UnionFS(联合文件系统)"></a>UnionFS(联合文件系统)</h3><p>下载镜像的时候，一层一层的就是这个</p><p>联合文件系统：Union文件系统是一种分层、轻量级、并且高性能的文件系统、它支持对文件系统的修改作为一次提交来一层层叠加，同时可以将不同目录挂载到同一虚拟文件系统下。联合文件系统是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p>特性：一次同时加载多个文件系统，但从外面看起来。只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p><h3 id="Docker镜像加载原理-1"><a href="#Docker镜像加载原理-1" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h3><p>Docker的镜像实际上由一层一层文件系统组成，这种层级文件系统就是联合文件系统</p><p>bootfs（boot life system）主要包含bootloader和kernel，bootloader主要是引导加载kernel，linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的linux系统是一样的，包含boot加载的内核。当boot加载完成之后整个内核就都在内存中了。此时内存的使用已由bootfs转交给内核，此时系统也会卸载bootfs</p><p>rootfs在bootfs之上，包含的就是典型的linux系统中的/dev，/bin，/etc等标准目录和文件，rootfs就是各种不同的操作系统发行版，比如centos等等</p><p><img src="/2020/12/12/Docker%E9%95%9C%E5%83%8F%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86/1-1.png" alt="image-20201210150556417"></p><p>我们平时安装虚拟机的centos都是好几个g，为什么docker里才200M？</p><p>对于一个精简的os，rootfs可以小，只要包含最基本的命令，工具和程序库就可以，因为底层直接用Host和kernel，自己只需要提供rootfs就可以了。由此可见对于不同的linux发行版，bootfs基本是一致的，rootfs会有差别，因此不同的发行版可以公用bootfs</p><h2 id="分层理解"><a href="#分层理解" class="headerlink" title="分层理解"></a>分层理解</h2><p><strong>分层的镜像</strong></p><p>下载一个镜像，观察下载的日志输出，可以看到是一层一层在下载</p><p>为什么docker镜像要采用这种分层的结构呢？</p><p>因为可以进行资源共享。比如有多个镜像从相同的Base镜像构建而来，那么宿主机只需要在磁盘上保留一份Base镜像，同时内存中也只需要加载一份Base镜像，这样就可以为所有的容器服务了，而且镜像每一层都可以被共享。</p><p><strong>理解</strong></p><p>所有的Docker镜像都起始于一个基础镜像层，当进行修改或增加新的镜像层的时候，就会在当前镜像层之上，创建新的镜像层。</p><p><img src="/2020/12/12/Docker%E9%95%9C%E5%83%8F%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86/1-2.png" alt="image-20201210153321084"></p><p>在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合，理解这一点非常重要。下面这个例子，每个镜像层包含三个文件，而镜像包含了两个镜像层的6个文件。</p><p><img src="/2020/12/12/Docker%E9%95%9C%E5%83%8F%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86/1-3.png" alt="image-20201210153632361"></p><p>下图展示了一个稍微复杂的三层镜像，在外部看来整个镜像只有6个文件，这是因为最上层中的文件7是文件5的一个更新版本。</p><p><img src="/2020/12/12/Docker%E9%95%9C%E5%83%8F%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86/1-4.png" alt="image-20201210153808042"></p><p>上图镜像层中的文件覆盖了底层镜像层中的文件，这样就使得文件的更新版本作为一个新的镜像层添加到镜像中。</p><p>Docker通过存储引擎（新版本是采用快照机制）的方式来实现镜像层堆栈，并保证多镜像层对外展示为统一文件系统</p><p>下图展示了与系统显示相同的三层镜像。所有镜像层堆叠并合并，对外提供统一的视图。</p><p><img src="/2020/12/12/Docker%E9%95%9C%E5%83%8F%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86/1-5.png" alt="image-20201210154242853"></p><p><strong>特点</strong></p><p>Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部</p><p><strong>这一层就是我们通常所说的容器层，容器之下的都叫镜像层</strong></p><p><img src="/2020/12/12/Docker%E9%95%9C%E5%83%8F%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86/1-6.png" alt="image-20201210154456020"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;镜像是什么&quot;&gt;&lt;a href=&quot;#镜像是什么&quot; class=&quot;headerlink&quot; title=&quot;镜像是什么&quot;&gt;&lt;/a&gt;镜像是什么&lt;/h2&gt;&lt;p&gt;镜像是一种轻量级，可独立执行的软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的内容，包括代码、运行时，库、环境变量和配置文件&lt;/p&gt;
&lt;p&gt;所有的应用，直接打包docker镜像，就可以运行起来&lt;/p&gt;
&lt;p&gt;如何得到镜像&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;从远程仓库下载&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;别人拷贝给你&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自己制作一个DockerFile&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="java" scheme="http://www.jonyonwzj.top/categories/java/"/>
    
    
    <category term="Docker" scheme="http://www.jonyonwzj.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="http://www.jonyonwzj.top/2020/12/11/git/"/>
    <id>http://www.jonyonwzj.top/2020/12/11/git/</id>
    <published>2020-12-11T08:31:39.000Z</published>
    <updated>2020-12-11T08:34:26.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h1><p>git config –list</p><a id="more"></a><h1 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h1><p>git config –global user.name “”<br>git config –global user.email “”</p><h1 id="在本地初始化一个git仓库-此文件为隐藏文件夹"><a href="#在本地初始化一个git仓库-此文件为隐藏文件夹" class="headerlink" title="在本地初始化一个git仓库 (此文件为隐藏文件夹)#"></a>在本地初始化一个git仓库 (此文件为隐藏文件夹)#</h1><p>git init</p><h1 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h1><p>git clone 远程Git仓库地址</p><h1 id="工作目录、暂存区、-版本库概念"><a href="#工作目录、暂存区、-版本库概念" class="headerlink" title="工作目录、暂存区、 版本库概念#"></a>工作目录、暂存区、 版本库概念#</h1><p>版本库: .git隐藏文件<br>工作目录:包含.git文件夹的目录<br>暂存区: .git文件中的index文件</p><h1 id="git工作目录下文件的两种状态"><a href="#git工作目录下文件的两种状态" class="headerlink" title="git工作目录下文件的两种状态"></a>git工作目录下文件的两种状态</h1><p>untracked 未跟踪(未被纳入版本控制)<br>tracked 已跟踪(被纳入版本控制)<br> Unmodified 未修改状态<br> Modified 修改状态<br> Staged 已暂存状态</p><hr><h1 id="本地仓库操作"><a href="#本地仓库操作" class="headerlink" title="本地仓库操作"></a>本地仓库操作</h1><h2 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h2><p>git status<br>git status -s (使输出信息更加简洁)</p><h2 id="将未跟踪文件加入暂存区"><a href="#将未跟踪文件加入暂存区" class="headerlink" title="将未跟踪文件加入暂存区"></a>将未跟踪文件加入暂存区</h2><p>git add hello.txt</p><h2 id="将暂存区的文件取消暂存"><a href="#将暂存区的文件取消暂存" class="headerlink" title="将暂存区的文件取消暂存"></a>将暂存区的文件取消暂存</h2><p>git reset hello.txt</p><h2 id="将暂存区的文件修改提交到仓库"><a href="#将暂存区的文件修改提交到仓库" class="headerlink" title="将暂存区的文件修改提交到仓库"></a>将暂存区的文件修改提交到仓库</h2><p>git commit -m “日志文件”</p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>git rm hello.txt(只删除了工作区的，把操作放到暂存区)<br>git commit -m “delete hello.txt”(提交到本地仓库,真正删除)<br>注:手动删除后文件会变为未跟踪状态，需要git add 加入暂存区后，git commit 提交文件修改状态到仓库</p><h2 id="忽略列表"><a href="#忽略列表" class="headerlink" title="忽略列表"></a>忽略列表</h2><p>touch .gitignore 创建一个.gitignore文件列出要忽略的文件模式</p><p><em>.a   (以.a结尾的文件忽略不进行管理)<br>!lib.a    (lib.a除外)<br>/todo (tode文件忽略)<br>build/ (build目录下所有文件忽略)<br>doc/</em>.txt (忽略doc目录下所有的txt文件)<br>doc/*<em>/</em>.pdf (忽略doc目录下包含子目录下的所有pdf文件)</p><h2 id="查看日志信息"><a href="#查看日志信息" class="headerlink" title="查看日志信息"></a>查看日志信息</h2><p>git log</p><hr><h1 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h1><h2 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h2><p>git remote<br>git remote -v<br>git remote show origin(显示详细信息)</p><h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><p>git remote add 仓库名(一般叫origin) 地址</p><h2 id="移除无效远程仓库"><a href="#移除无效远程仓库" class="headerlink" title="移除无效远程仓库"></a>移除无效远程仓库</h2><p>git remote rm 仓库名 (只是从本地移除远程仓库的记录，并不会真正影响到远程仓库)</p><h2 id="从远程仓库抓取或拉取"><a href="#从远程仓库抓取或拉取" class="headerlink" title="从远程仓库抓取或拉取"></a>从远程仓库抓取或拉取</h2><p>git fitch是从远程仓库获取最新版本到本地仓库，不会自动merge(合并)<br>git merge origin/master(合并origin/master分支)</p><p>git pull是从远程仓库获取最新版本到本地仓库，会自动merge(合并)<br>git pull origin master –allow-unrelated-histories(强行拉取)</p><h2 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h2><p>git push origin master</p><hr><h1 id="git分支"><a href="#git分支" class="headerlink" title="git分支"></a>git分支</h1><h2 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h2><p>git branch 列出所有本地分支<br>git branch -r 列出所有远程分支<br>git branch -a 列出所有本地分支和远程分支</p><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><p>git branch 分支名称(b1)</p><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><p>git checkout 分支名称(b1)</p><h2 id="推送至远程仓库分支"><a href="#推送至远程仓库分支" class="headerlink" title="推送至远程仓库分支"></a>推送至远程仓库分支</h2><p>git push origin 分支名称(b1)</p><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><p>git merge 分支名称b1</p><p>有时候合并操作不会如此顺利，如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，git就没办法合并他们，<br>同时会提示文件冲突。此时我们需要打开冲突的文件并修复冲突的内容，最后执行git add命令来标识冲突已解决。</p><h2 id="推送到远程仓库-1"><a href="#推送到远程仓库-1" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h2><p>git push origin 分支名称(master)<br>git push origin 分支名称(b1)</p><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><p>git branch -d 分支名称(b1)<br>git branch -D 分支名称(b1)   (强制删除)</p><h2 id="删除远程仓库的分支"><a href="#删除远程仓库的分支" class="headerlink" title="删除远程仓库的分支"></a>删除远程仓库的分支</h2><p>git push origin -d 分支名称(b1)</p><hr><h1 id="git标签"><a href="#git标签" class="headerlink" title="git标签"></a>git标签</h1><h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><p>git tag 标签名（v1.0）</p><h2 id="列出已有的标签"><a href="#列出已有的标签" class="headerlink" title="列出已有的标签"></a>列出已有的标签</h2><p>git tag (列出所有tag)<br>git show 标签名（v1.0）</p><h2 id="将标签推送至远程仓库"><a href="#将标签推送至远程仓库" class="headerlink" title="将标签推送至远程仓库"></a>将标签推送至远程仓库</h2><p>git push 远程仓库名(origin) 标签名（v1.0）</p><h2 id="检出标签"><a href="#检出标签" class="headerlink" title="检出标签"></a>检出标签</h2><p>git checkout -b 分支名称(b2) 标签名(v1.0)  创建新的分支b2状态为v1.0的状态</p><h2 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h2><p>git tag -d 标签名(v1.0)    删除本地标签<br>git push origin:refs/tags/标签名     删除远程标签</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;查看配置信息&quot;&gt;&lt;a href=&quot;#查看配置信息&quot; class=&quot;headerlink&quot; title=&quot;查看配置信息&quot;&gt;&lt;/a&gt;查看配置信息&lt;/h1&gt;&lt;p&gt;git config –list&lt;/p&gt;</summary>
    
    
    
    
    <category term="git" scheme="http://www.jonyonwzj.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>谈谈final、finally、finalize有什么不同</title>
    <link href="http://www.jonyonwzj.top/2020/12/10/%E8%B0%88%E8%B0%88final%E3%80%81finally%E3%80%81finalize%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C/"/>
    <id>http://www.jonyonwzj.top/2020/12/10/%E8%B0%88%E8%B0%88final%E3%80%81finally%E3%80%81finalize%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C/</id>
    <published>2020-12-10T12:59:13.000Z</published>
    <updated>2020-12-10T13:10:40.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a>典型回答</h1><p>final（修饰词）：适合用来在语义方面标识当前的方法、变量、类不可以更改，适合封装一些代码，让用的人知道这些不要随意更改。<strong>final</strong>标识的变量不等于不可变，对于变量而言这个变量只是不能够再赋值，但是可以做任何增删改查操作。所以从这方面来讲，final在高并发下面的数据一致性起到积极作用，对性能比较好。</p><a id="more"></a><p>要想写一个不可变的对象（immutable）：</p><p>首先对象和类的成员都是private和final；</p><p>其次对象的赋值不要直接赋值，而是采用<strong>深拷贝</strong>；</p><p>对象不要随意实现setter（）方法；</p><p>在获取当前对象或状态的时候要遵守<strong>copy or write**</strong>原则**，创建私有的copy。</p><p>finally（基础类）：保证重点代码一定要被执行的<strong>一种机制</strong>，在一些资源处理关闭时用到，使用try-finally，try-catch-finally来进行类似关闭JDBC，保证unlock锁等动作，对于try catch最好即关即用。更推荐使用java7中添加的try-with-resources语句。</p><blockquote><p>try-with-resources（语法糖）：</p><p>try-with-resources会自动关闭try（）中的资源，并且将先关闭后声明的资源。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">列几个 fianlly 不会被执行的情况:</span><br><span class="line"><span class="number">1.</span> <span class="keyword">try</span>-cach 异常退出。</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">system.exit(<span class="number">1</span>)</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">print(abc)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 无限循环</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(ture)&#123;</span><br><span class="line">    print(abc)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">print(abc)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 线程被杀死</span><br><span class="line">当执行 <span class="keyword">try</span>，<span class="keyword">finally</span> 的线程被杀死时。<span class="keyword">finally</span> 也无法执行。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">总结</span><br><span class="line"><span class="number">1</span>，不要在 <span class="keyword">finally</span> 中使用 <span class="keyword">return</span> 语句。</span><br><span class="line"><span class="number">2</span>，<span class="keyword">finally</span> 总是执行，除非程序或者线程被中断。</span><br></pre></td></tr></table></figure><p>finalize(基础类)：java虚拟机在实现GC（垃圾回收）时调用的方法，理论上是进行内存回收等操作的地方。但实际上这个方法调用时机并不固定，有可能处理不当导致程序异常。并且finalize源码实现使用了try catch，但是并没有抛出异常，而是生吞。所以要是在这里面处理逻辑，自己都不知道哪里出了问题。<strong>finalize**</strong>机制**已经不推荐使用，并且在JDK9被标记为deprecated.（目前在逐步使用Cleaner来替换掉原有的finalize实现）</p><h1 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h1><p>这两个概念的区别就是“当在给一个变量赋值的时候是否直接使用这个值的内存地址”</p><p>例如：</p><p>基础类型都是值传递，所以浅拷贝过来的对象赋值后不会影响之前被拷贝的对象。</p><p>但是对于引用类型的变量，在拷贝的时候就需要考虑了，如果你要使新的对象的赋值不会影响之前被拷贝的对象，就要用深拷贝，否则就是copy的内存地址。</p><p>一个类实现拷贝的功能很简单，有两种方式：</p><p>1.实现Clone接口，在clone方法里面进行拷贝</p><p>2.要是实现序列化，先把对象写到输入流里面，然后再读出来对象，这样就是一个新的对象了。</p><h1 id="Copy-or-write"><a href="#Copy-or-write" class="headerlink" title="Copy or write"></a>Copy or write</h1><p>Copy or write：保证只有一个专门的线程往里面写；可以有多个线程读取，这样能保证线程同步。</p><p>Copy or wirte原则核心思想：有线程使用容器中的数据时，如果是写入，则复制出一个新容器，修改新容器中的数据后，再将引用指向新容器。如果是读操作则正常读引用地址中的容器数据。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;典型回答&quot;&gt;&lt;a href=&quot;#典型回答&quot; class=&quot;headerlink&quot; title=&quot;典型回答&quot;&gt;&lt;/a&gt;典型回答&lt;/h1&gt;&lt;p&gt;final（修饰词）：适合用来在语义方面标识当前的方法、变量、类不可以更改，适合封装一些代码，让用的人知道这些不要随意更改。&lt;strong&gt;final&lt;/strong&gt;标识的变量不等于不可变，对于变量而言这个变量只是不能够再赋值，但是可以做任何增删改查操作。所以从这方面来讲，final在高并发下面的数据一致性起到积极作用，对性能比较好。&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://www.jonyonwzj.top/categories/java/"/>
    
    
    <category term="Java面试基础" scheme="http://www.jonyonwzj.top/tags/Java%E9%9D%A2%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Docker的常用命令</title>
    <link href="http://www.jonyonwzj.top/2020/12/09/Docker%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.jonyonwzj.top/2020/12/09/Docker%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2020-12-09T09:54:30.000Z</published>
    <updated>2020-12-09T09:58:04.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker的常用命令"><a href="#Docker的常用命令" class="headerlink" title="Docker的常用命令"></a>Docker的常用命令</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version  #显示docker的版本信息</span><br><span class="line">docker info    #显示docker的系统信息，包括镜像和容器的数量</span><br><span class="line">docker --help  #万能命令 帮助命令</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><p><strong>docker images</strong> 查看所有本地主机上的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              bf756fb1ae65        11 months ago       13.3kB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">解释</span></span><br><span class="line">REPOSITORY  镜像仓库源</span><br><span class="line">TAG         标签</span><br><span class="line">IMAGE ID    id</span><br><span class="line">CREATED     创建时间</span><br><span class="line">SIZE        大小</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">可选项</span></span><br><span class="line">Options:</span><br><span class="line">  -a, --all             #列出所有镜像</span><br><span class="line">  -q, --quiet           #只显示镜像的id</span><br></pre></td></tr></table></figure><p><strong>docker search</strong>搜索镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker search mysql</span><br><span class="line">NAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   10247               [OK]                </span><br><span class="line">mariadb                           MariaDB is a community-developed fork of MyS…   3785                [OK]                </span><br><span class="line"><span class="meta">#</span><span class="bash">STARS 收藏数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">可选项，通过收藏来过滤</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker search mysql  --filter=STARS=3000  #瘦素出来的镜像收藏大于3000的</span><br><span class="line">NAME                DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mysql               MySQL is a widely used, open-source relation…   10247               [OK]                </span><br><span class="line">mariadb             MariaDB is a community-developed fork of MyS…   3785                [OK]  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>docker pull</strong>下载镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载镜像 docker pull 镜像名[:tag]</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker pull mysql</span><br><span class="line">Using default tag: latest  #如果不写tag，默认就是lates</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">852e50cd189d: Pull complete  #分层下载，docker image的核心联合文件</span><br><span class="line">29969ddb0ffb: Pull complete </span><br><span class="line">a43f41a44c48: Pull complete </span><br><span class="line">5cdd802543a3: Pull complete </span><br><span class="line">b79b040de953: Pull complete </span><br><span class="line">938c64119969: Pull complete </span><br><span class="line">7689ec51a0d9: Pull complete </span><br><span class="line">a880ba7c411f: Pull complete </span><br><span class="line">984f656ec6ca: Pull complete </span><br><span class="line">9f497bce458a: Pull complete </span><br><span class="line">b9940f97694b: Pull complete </span><br><span class="line">2f069358dc96: Pull complete </span><br><span class="line">Digest: sha256:4bb2e81a40e9d0d59bd8e3dc2ba5e1f2197696f6de39a91e90798dd27299b093 #签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest  #真实地址</span><br><span class="line"><span class="meta">#</span><span class="bash">docker pull mysql 等价于 docker pull docker.io/library/mysql:latest</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">指定版本下载</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">852e50cd189d: Already exists #不下载重复文件</span><br><span class="line">29969ddb0ffb: Already exists </span><br><span class="line">a43f41a44c48: Already exists </span><br><span class="line">5cdd802543a3: Already exists </span><br><span class="line">b79b040de953: Already exists </span><br><span class="line">938c64119969: Already exists </span><br><span class="line">7689ec51a0d9: Already exists </span><br><span class="line">36bd6224d58f: Pull complete </span><br><span class="line">cab9d3fa4c8c: Pull complete </span><br><span class="line">1b741e1c47de: Pull complete </span><br><span class="line">aac9d11987ac: Pull complete </span><br><span class="line">Digest: sha256:8e2004f9fe43df06c3030090f593021a5f283d028b5ed5765cc24236c2c4d88e</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br></pre></td></tr></table></figure><p><strong>docker rmi</strong>删除镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">rmi:remove image</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">删除指定的镜像</span></span><br><span class="line">docker rmi -f 镜像id</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker rmi -f ae0658fdbad5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">删除多个镜像</span></span><br><span class="line">docker rmi -f 镜像id 镜像id 镜像id   </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">删除全部镜像</span></span><br><span class="line">docker rmi -f $(docker images -aq)</span><br></pre></td></tr></table></figure><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p><strong>有了镜像才可以创建容器,linux,下载一个centOS来测试学习</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><p><strong>新建容器并使用</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">docker run[可选参数] 镜像名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">参数说明</span></span><br><span class="line">--name=&quot;Name&quot;    容器名字 --tomcat01,tomcat02来区分容器</span><br><span class="line">-d               后台方式运行</span><br><span class="line">-it              使用交互方式运行,进入容器查看内容  i是交互，t是伪终端，两者通常同时使用</span><br><span class="line">-p               指定容器的端口,进入容器查看内容</span><br><span class="line">    -p ip:主机端口:容器端口</span><br><span class="line">    -p 主机端口:容器端口</span><br><span class="line">    -p 容器端口</span><br><span class="line">    容器端口</span><br><span class="line">-P               随机指定端口</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">新建启动并进入容器</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@82f74728d9db /]# ls                      #容器内部的centos,内部的centos和外部的centos没有关系,很多命令是不完善的</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"><span class="meta">#</span><span class="bash">从容器中退出</span></span><br><span class="line">[root@82f74728d9db /]# exit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p><strong>列出所有运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">docker ps命令</span></span><br><span class="line">    #列出正在运行的容器</span><br><span class="line"> -a #列出正在运行的容器+历史运行过的容器</span><br><span class="line"> -n=? #显示最近创建的容器</span><br><span class="line"> -q #只显示容器的编号</span><br><span class="line"></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker ps               #正在运行的容器</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker ps -a            #运行过的容器</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                          PORTS               NAMES</span><br><span class="line">82f74728d9db        centos              &quot;/bin/bash&quot;         4 minutes ago       Exited (0) About a minute ago                       objective_haslett</span><br><span class="line">bce4aec829a4        bf756fb1ae65        &quot;/hello&quot;            2 hours ago         Exited (0) 2 hours ago                              sleepy_mcnulty</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>退出容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit #容器停止并退出</span><br><span class="line">Ctrl+p+q #容器不停止退出</span><br></pre></td></tr></table></figure><p><strong>删除容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id                  #删除指定容器,不能删除正在运行的容器,如果要强制删除  rm-f</span><br><span class="line">docker rm -f $(docker ps -aq)    #删除所有的容器</span><br><span class="line">docker ps -a -q|xargs docker rm  #删除所有的容器</span><br></pre></td></tr></table></figure><p><strong>启动和停止容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id       #启动容器</span><br><span class="line">docker restart 容器id     #重启容器</span><br><span class="line">docker stop 容器id        #停止当前正在运行容器</span><br><span class="line">docker kill 容器id        #强制停止当前容器</span><br></pre></td></tr></table></figure><h2 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h2><p><strong>后台启动容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">docker run -d 镜像名</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker run -d centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">问题:执行docker ps,发现后台停止了</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">常见的坑:docker容器使用后台运行,就必须要有一个前台进程,docker返现没有应用,就会自动停止</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Nginx:容器启动后,发现自己没有提供服务,就会立刻停止,就是没有程序了</span></span><br></pre></td></tr></table></figure><p><strong>查看日志</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker logs -tf --tail  容器,没有日志</span><br><span class="line"><span class="meta">#</span><span class="bash">自己编写一段shell脚本</span></span><br><span class="line">docker run -d centos /bin/sh -c &quot;while true;do echo wzj;sleep 1;done&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示日志</span></span><br><span class="line">docker logs -tf --tail 10 容器id</span><br><span class="line">-f 动态打印内容,先打印10条,后面继续打印</span><br><span class="line">-t 打印时间戳+内容,只打印10条</span><br><span class="line">-tf 动态打印时间戳+内容,先打印10条,后面继续打印</span><br></pre></td></tr></table></figure><p><strong>查看容器中的进程信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令 docker top 容器id</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker top 61aefd99735b</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                10447               10423               0                   14:03               ?                   00:00:00            /bin/sh -c while true;do echo wzj;sleep 1;done</span><br><span class="line">root                11444               10447               0                   14:10               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>查看镜像的元数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令  docker inspect 容器id</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker inspect 61aefd99735b</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;61aefd99735ba514d489686897c1aedd42565403ab6250db9b9dd1ba0b1e3d04&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2020-12-09T06:03:00.62604644Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/sh&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;-c&quot;,</span><br><span class="line">            &quot;while true;do echo wzj;sleep 1;done&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">            &quot;Running&quot;: true,</span><br><span class="line">            &quot;Paused&quot;: false,</span><br><span class="line">            &quot;Restarting&quot;: false,</span><br><span class="line">            &quot;OOMKilled&quot;: false,</span><br><span class="line">            &quot;Dead&quot;: false,</span><br><span class="line">            &quot;Pid&quot;: 10447,</span><br><span class="line">            &quot;ExitCode&quot;: 0,</span><br><span class="line">            &quot;Error&quot;: &quot;&quot;,</span><br><span class="line">            &quot;StartedAt&quot;: &quot;2020-12-09T06:03:00.967666729Z&quot;,</span><br><span class="line">            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Image&quot;: &quot;sha256:300e315adb2f96afe5f0b2780b87f28ae95231fe3bdd1e16b9ba606307728f55&quot;,</span><br><span class="line">        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/61aefd99735ba514d489686897c1aedd42565403ab6250db9b9dd1ba0b1e3d04/resolv.conf&quot;,</span><br><span class="line">        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/61aefd99735ba514d489686897c1aedd42565403ab6250db9b9dd1ba0b1e3d04/hostname&quot;,</span><br><span class="line">        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/61aefd99735ba514d489686897c1aedd42565403ab6250db9b9dd1ba0b1e3d04/hosts&quot;,</span><br><span class="line">        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/61aefd99735ba514d489686897c1aedd42565403ab6250db9b9dd1ba0b1e3d04/61aefd99735ba514d489686897c1aedd42565403ab6250db9b9dd1ba0b1e3d04-json.log&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;/sharp_colden&quot;,</span><br><span class="line">        &quot;RestartCount&quot;: 0,</span><br><span class="line">        &quot;Driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">        &quot;Platform&quot;: &quot;linux&quot;,</span><br><span class="line">        &quot;MountLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ProcessLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;AppArmorProfile&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ExecIDs&quot;: null,</span><br><span class="line">        &quot;HostConfig&quot;: &#123;</span><br><span class="line">            &quot;Binds&quot;: null,</span><br><span class="line">            &quot;ContainerIDFile&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LogConfig&quot;: &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;json-file&quot;,</span><br><span class="line">                &quot;Config&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;NetworkMode&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;PortBindings&quot;: &#123;&#125;,</span><br><span class="line">            &quot;RestartPolicy&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;no&quot;,</span><br><span class="line">                &quot;MaximumRetryCount&quot;: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;AutoRemove&quot;: false,</span><br><span class="line">            &quot;VolumeDriver&quot;: &quot;&quot;,</span><br><span class="line">            &quot;VolumesFrom&quot;: null,</span><br><span class="line">            &quot;CapAdd&quot;: null,</span><br><span class="line">            &quot;CapDrop&quot;: null,</span><br><span class="line">            &quot;Capabilities&quot;: null,</span><br><span class="line">            &quot;Dns&quot;: [],</span><br><span class="line">            &quot;DnsOptions&quot;: [],</span><br><span class="line">            &quot;DnsSearch&quot;: [],</span><br><span class="line">            &quot;ExtraHosts&quot;: null,</span><br><span class="line">            &quot;GroupAdd&quot;: null,</span><br><span class="line">            &quot;IpcMode&quot;: &quot;private&quot;,</span><br><span class="line">            &quot;Cgroup&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Links&quot;: null,</span><br><span class="line">            &quot;OomScoreAdj&quot;: 0,</span><br><span class="line">            &quot;PidMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Privileged&quot;: false,</span><br><span class="line">            &quot;PublishAllPorts&quot;: false,</span><br><span class="line">            &quot;ReadonlyRootfs&quot;: false,</span><br><span class="line">            &quot;SecurityOpt&quot;: null,</span><br><span class="line">            &quot;UTSMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;UsernsMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;ShmSize&quot;: 67108864,</span><br><span class="line">            &quot;Runtime&quot;: &quot;runc&quot;,</span><br><span class="line">            &quot;ConsoleSize&quot;: [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            &quot;Isolation&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpuShares&quot;: 0,</span><br><span class="line">            &quot;Memory&quot;: 0,</span><br><span class="line">            &quot;NanoCpus&quot;: 0,</span><br><span class="line">            &quot;CgroupParent&quot;: &quot;&quot;,</span><br><span class="line">            &quot;BlkioWeight&quot;: 0,</span><br><span class="line">            &quot;BlkioWeightDevice&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceReadBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceReadIOps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteIOps&quot;: null,</span><br><span class="line">            &quot;CpuPeriod&quot;: 0,</span><br><span class="line">            &quot;CpuQuota&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimePeriod&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimeRuntime&quot;: 0,</span><br><span class="line">            &quot;CpusetCpus&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpusetMems&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Devices&quot;: [],</span><br><span class="line">            &quot;DeviceCgroupRules&quot;: null,</span><br><span class="line">            &quot;DeviceRequests&quot;: null,</span><br><span class="line">            &quot;KernelMemory&quot;: 0,</span><br><span class="line">            &quot;KernelMemoryTCP&quot;: 0,</span><br><span class="line">            &quot;MemoryReservation&quot;: 0,</span><br><span class="line">            &quot;MemorySwap&quot;: 0,</span><br><span class="line">            &quot;MemorySwappiness&quot;: null,</span><br><span class="line">            &quot;OomKillDisable&quot;: false,</span><br><span class="line">            &quot;PidsLimit&quot;: null,</span><br><span class="line">            &quot;Ulimits&quot;: null,</span><br><span class="line">            &quot;CpuCount&quot;: 0,</span><br><span class="line">            &quot;CpuPercent&quot;: 0,</span><br><span class="line">            &quot;IOMaximumIOps&quot;: 0,</span><br><span class="line">            &quot;IOMaximumBandwidth&quot;: 0,</span><br><span class="line">            &quot;MaskedPaths&quot;: [</span><br><span class="line">                &quot;/proc/asound&quot;,</span><br><span class="line">                &quot;/proc/acpi&quot;,</span><br><span class="line">                &quot;/proc/kcore&quot;,</span><br><span class="line">                &quot;/proc/keys&quot;,</span><br><span class="line">                &quot;/proc/latency_stats&quot;,</span><br><span class="line">                &quot;/proc/timer_list&quot;,</span><br><span class="line">                &quot;/proc/timer_stats&quot;,</span><br><span class="line">                &quot;/proc/sched_debug&quot;,</span><br><span class="line">                &quot;/proc/scsi&quot;,</span><br><span class="line">                &quot;/sys/firmware&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;ReadonlyPaths&quot;: [</span><br><span class="line">                &quot;/proc/bus&quot;,</span><br><span class="line">                &quot;/proc/fs&quot;,</span><br><span class="line">                &quot;/proc/irq&quot;,</span><br><span class="line">                &quot;/proc/sys&quot;,</span><br><span class="line">                &quot;/proc/sysrq-trigger&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;GraphDriver&quot;: &#123;</span><br><span class="line">            &quot;Data&quot;: &#123;</span><br><span class="line">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/d82a3742a1536776a8ca12275a828d31d2aa577d9e7ccdeaa1e52823b368d5fd-init/diff:/var/lib/docker/overlay2/95dda4a69e01b60eaf2ce0ea310c41f2be953dd10d4a0716f6f4368e22dc1595/diff&quot;,</span><br><span class="line">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/d82a3742a1536776a8ca12275a828d31d2aa577d9e7ccdeaa1e52823b368d5fd/merged&quot;,</span><br><span class="line">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/d82a3742a1536776a8ca12275a828d31d2aa577d9e7ccdeaa1e52823b368d5fd/diff&quot;,</span><br><span class="line">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/d82a3742a1536776a8ca12275a828d31d2aa577d9e7ccdeaa1e52823b368d5fd/work&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Mounts&quot;: [],</span><br><span class="line">        &quot;Config&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;61aefd99735b&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;/bin/sh&quot;,</span><br><span class="line">                &quot;-c&quot;,</span><br><span class="line">                &quot;while true;do echo wzj;sleep 1;done&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Image&quot;: &quot;centos&quot;,</span><br><span class="line">            &quot;Volumes&quot;: null,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: null,</span><br><span class="line">            &quot;OnBuild&quot;: null,</span><br><span class="line">            &quot;Labels&quot;: &#123;</span><br><span class="line">                &quot;org.label-schema.build-date&quot;: &quot;20201204&quot;,</span><br><span class="line">                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,</span><br><span class="line">                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,</span><br><span class="line">                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,</span><br><span class="line">                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;NetworkSettings&quot;: &#123;</span><br><span class="line">            &quot;Bridge&quot;: &quot;&quot;,</span><br><span class="line">            &quot;SandboxID&quot;: &quot;eb5b89741e2e4fdb4c694f7e841ea4c9e8463c6cf30c3ca9756a0eee8636f220&quot;,</span><br><span class="line">            &quot;HairpinMode&quot;: false,</span><br><span class="line">            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LinkLocalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;Ports&quot;: &#123;&#125;,</span><br><span class="line">            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/eb5b89741e2e&quot;,</span><br><span class="line">            &quot;SecondaryIPAddresses&quot;: null,</span><br><span class="line">            &quot;SecondaryIPv6Addresses&quot;: null,</span><br><span class="line">            &quot;EndpointID&quot;: &quot;44576319715bea27fb66b2258585ac4d3e42eed35d92dbcf35810d1884fc663f&quot;,</span><br><span class="line">            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">            &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">            &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">            &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">            &quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;bridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: null,</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;86dff082c7cb9acb552b2acf9116e7d6290a6c301fab07f364ab877f8a0b8483&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;44576319715bea27fb66b2258585ac4d3e42eed35d92dbcf35810d1884fc663f&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>进入当前正在运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">我们通常容器都是使用后台方式运行的,需要进入容器,修改一些配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">方式一</span></span><br><span class="line">docker exec -it 容器id /bin/bash</span><br><span class="line"></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">61aefd99735b        centos              &quot;/bin/sh -c &#x27;while t…&quot;   16 minutes ago      Up 16 minutes                           sharp_colden</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker exec -it 61aefd99735b /bin/bash</span><br><span class="line">[root@61aefd99735b /]# ps -ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 06:03 ?        00:00:00 /bin/sh -c while true;do echo wzj;sleep 1;done</span><br><span class="line">root      1022     0  0 06:19 pts/0    00:00:00 /bin/bash</span><br><span class="line">root      1048     1  0 06:20 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br><span class="line">root      1049  1022  0 06:20 pts/0    00:00:00 ps -ef</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">方式二</span></span><br><span class="line">docker attach 容器id</span><br><span class="line">正在执行当前的带啊吗</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">区别</span></span><br><span class="line">docker exec     #进入容器后开启一个新的终端,可以在里面操作</span><br><span class="line">docker attach   #进入容器正在执行的新的终端,不会启动新的进程</span><br></pre></td></tr></table></figure><p><strong>从容器内拷贝文件到主机上</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器id:容器内路径 目的主机路径</span><br><span class="line"></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">centos              latest              300e315adb2f        30 hours ago        209MB</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@227c1c4d8d5c /]# [root@iz2ze3x4is8pvdy0vb4x4kz ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">227c1c4d8d5c        centos              &quot;/bin/bash&quot;         27 seconds ago      Up 27 seconds                           fervent_noether</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz ~]# cd /home</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz home]# ls</span><br><span class="line">admin  redis  www</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz home]# touch wzj.java</span><br><span class="line"><span class="meta">#</span><span class="bash">查看当前主机目录下</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz home]# ls</span><br><span class="line">admin  redis  www  wzj.java</span><br><span class="line"><span class="meta">#</span><span class="bash">进入docker容器内部</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz home]# docker attach 227c1c4d8d5c</span><br><span class="line">[root@227c1c4d8d5c /]# cd /home</span><br><span class="line">[root@227c1c4d8d5c home]# ls</span><br><span class="line"><span class="meta">#</span><span class="bash">在容器内新建一个文件</span></span><br><span class="line">[root@227c1c4d8d5c home]# touch test.java</span><br><span class="line">[root@227c1c4d8d5c home]# ls</span><br><span class="line">test.java</span><br><span class="line">[root@227c1c4d8d5c home]# exit</span><br><span class="line">exit</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz home]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line"><span class="meta">#</span><span class="bash">将文件拷贝出来到主机上</span></span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz home]# docker cp 227c1c4d8d5c:/home/test.java /home</span><br><span class="line">[root@iz2ze3x4is8pvdy0vb4x4kz home]# ls</span><br><span class="line">admin  redis  test.java  www  wzj.java</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">拷贝是一个手动过程,未来我们使用-v卷的技术可以实现主机/home目录和容器/home目录连通</span></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">docker image                                                    #查看本地主机上所有的镜像</span><br><span class="line">docker image -q                                                 #查看本地主机上所有的镜像,只显示id</span><br><span class="line">docker search 镜像名                                             #搜索镜像</span><br><span class="line">docker search 镜像名 --filter=STARS=num                          #搜索收藏数大于镜像</span><br><span class="line">docker pull 镜像名                                               #下载镜像</span><br><span class="line">docker pull 镜像名:tag                                           #下载tag版本的镜像</span><br><span class="line">docker rmi 镜像id                                                #删除指定镜像</span><br><span class="line">docker rmi -f 镜像id 镜像id...                                    #删除多个镜像</span><br><span class="line">docker rmi -f $(docker images -aq)                              #删除全部镜像</span><br><span class="line">docker run -it 镜像名 /bin/bash                                  #使用交互方式运行，新建并启动容器</span><br><span class="line">docker ps                                                       #列出正在运行的容器</span><br><span class="line">docker ps -a                                                    #列出正在运行的容器和运行过的容器</span><br><span class="line">exit                                                            #容器停止并退出</span><br><span class="line">Ctrl+p+q                                                        #容器退出但不停止</span><br><span class="line">docker rm 容器id                                                 #删除指定容器</span><br><span class="line">docker rm -f $(docker ps -aq)                                   #删除所有容器</span><br><span class="line">docker rm -a -q|xargs docker rm                                 #删除所有容器</span><br><span class="line">docker start 容器id                                              #启动容器</span><br><span class="line">docker restart 容器id                                            #重启容器</span><br><span class="line">docker stop 容器id                                               #停止当前正在运行容器</span><br><span class="line">docker kill 容器id                                               #强制停止当前容器</span><br><span class="line">docker run -d 镜像名                                             #后台启动容器</span><br><span class="line">docker logs -tf --tail num id                                   #显示日志</span><br><span class="line">docker top 容器id                                                #查看容器中的进程信息</span><br><span class="line">docker inspect 容器id                                            #查看镜像的元数据</span><br><span class="line">docker exec -it 容器id /bin/bash                                 #进入当前正在运行的容器</span><br><span class="line">docker attach 容器id                                             #进入当前正在运行的容器</span><br><span class="line">docker cp 容器id:容器内路径 目的主机路径                             #从容器内拷贝文件到主机上</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Docker的常用命令&quot;&gt;&lt;a href=&quot;#Docker的常用命令&quot; class=&quot;headerlink&quot; title=&quot;Docker的常用命令&quot;&gt;&lt;/a&gt;Docker的常用命令&lt;/h1&gt;&lt;h2 id=&quot;帮助命令&quot;&gt;&lt;a href=&quot;#帮助命令&quot; class=&quot;headerlink&quot; title=&quot;帮助命令&quot;&gt;&lt;/a&gt;帮助命令&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker version  #显示docker的版本信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker info    #显示docker的系统信息，包括镜像和容器的数量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker --help  #万能命令 帮助命令&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="java" scheme="http://www.jonyonwzj.top/categories/java/"/>
    
    
    <category term="Docker" scheme="http://www.jonyonwzj.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>对比Exception和Erorr，运行时异常和一般异常由什么区别</title>
    <link href="http://www.jonyonwzj.top/2020/12/08/%E5%AF%B9%E6%AF%94Exception%E5%92%8CErorr%EF%BC%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8%E5%92%8C%E4%B8%80%E8%88%AC%E5%BC%82%E5%B8%B8%E7%94%B1%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.jonyonwzj.top/2020/12/08/%E5%AF%B9%E6%AF%94Exception%E5%92%8CErorr%EF%BC%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8%E5%92%8C%E4%B8%80%E8%88%AC%E5%BC%82%E5%B8%B8%E7%94%B1%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</id>
    <published>2020-12-08T13:13:15.000Z</published>
    <updated>2020-12-08T13:27:13.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答:"></a>典型回答:</h1><ul><li><p>Exception和Error都继承了Throwable类，在java中只有Throwable类型的实例才可以被抛出（throw）或捕获（catch）</p></li><li><p>Error：非正常情况下，不太可能出现的情况，绝大多数Error都会导致程序（比如JVM自身）处于非正常的，不可恢复的情况。因为是非正常的情况，所以不需要捕获。</p></li><li><p>Exception：程序正常运行中，可以预料的意外情况，并且应该被捕获，进行相应的处理。</p></li><li><p>Exception分为可检查异常和不可检查异常</p></li></ul><ol><li>可检查异常（非RuntimeException）：在源码里必须显式的进行捕获处理，这是编译检查期的一部分。</li><li>不可检查异常（RuntimeException）：运行时异常，通常可以通过编码避免的逻辑错误，具体根据需求判断是否需要捕获，不在编译期做具体要求。</li></ol><a id="more"></a><p><img src="/2020/12/08/%E5%AF%B9%E6%AF%94Exception%E5%92%8CErorr%EF%BC%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8%E5%92%8C%E4%B8%80%E8%88%AC%E5%BC%82%E5%B8%B8%E7%94%B1%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/1-1.png" alt="Trowable"></p><h1 id="throws和throw的区别："><a href="#throws和throw的区别：" class="headerlink" title="throws和throw的区别："></a>throws和throw的区别：</h1><ul><li>throw：语句抛出一个具体的异常类型，一般在代码块内部</li></ul><p><code>public static void testThrow(Integer i) &#123;</code></p><p><code>if (i     == null) &#123;</code></p><p>`throw     new NullPointerException();*//运行时异常不需要在方法上申明*``</p><p><code>&#125;</code></p><p><code>&#125;</code></p><ul><li>throws：声明一个方法可能产生的所有异常，不做任何处理而是将异常往上抛，谁调用我我就抛给谁</li></ul><p><code>public static void testThrows() throws NullPointerException &#123;</code></p><p><code>Integer i = null;</code></p><p><code>System.out.println(i + 1);</code></p><p><code>&#125;</code></p><h1 id="NoClassDefFoundError和ClassNotFoundException的区别"><a href="#NoClassDefFoundError和ClassNotFoundException的区别" class="headerlink" title="NoClassDefFoundError和ClassNotFoundException的区别"></a>NoClassDefFoundError和ClassNotFoundException的区别</h1><ul><li><p>NoClassDefFoundError:一个class在编译时存在，在运行时找不到class文件了。（javac已经成功把程序编译为字节码文件了，</p><p>当JVM进程启动，通过类加载器加载字节码文件，由JIT编译字节码指令时，在classpath下找不到相应的类进行加载）</p></li></ul><ul><li><p>ClassNotFoundException:使用类似Class.forName()方法时check Exception。（编码时编译器就能告诉你这个地方需要捕获异常，</p><p>使用Class.forName()时必须捕获或者throws这个异常）</p></li></ul><h1 id="异常处理的两个基本原则"><a href="#异常处理的两个基本原则" class="headerlink" title="异常处理的两个基本原则"></a>异常处理的两个基本原则</h1><p>1.尽量不要捕获Exception这样的通用异常，而是捕获特定异常；</p><p>2.不要生吞（swallow）异常：如果不把异常抛出来，或者输出到日志，程序可能在后续代码以不可控的方式结束，无法判断哪里出了异常</p><ul><li>很多人喜欢在catch中用e.printStackTrace打印异常信息，但在稍微复杂的系统中就会不知道异常现象输出在哪里.最好使用日志，详细的输出到日志中.</li></ul><p>StackTrace(堆栈轨迹)</p><p><code>try &#123;</code></p><p>  <code>// 业务代码</code></p><p>  <code>// …</code></p><p><code>&#125; catch (IOException e) &#123;</code></p><p>  <code>e.printStackTrace();</code></p><p><code>&#125;</code></p><h1 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h1><p>我们从性能角度来审视一下 Java 的异常处理机制，这里有两个可能会相对昂贵的地方：</p><p>1.try-catch 代码段会产生额外的性能开销，或者换个角度说，它往往会影响 JVM 对代码进行优化，所以建议仅捕获有必要的代码段，尽量不要一个大的 try 包住整段的代码；与此同时，利用异常控制代码流程，也不是一个好主意，远比我们通常意义上的条件语句（if/else、switch）要低效。</p><p>2.Java 每实例化一个 Exception，都会对当时的栈进行快照，这是一个相对比较重的操作。如果发生的非常频繁，这个开销可就不能被忽略了。</p><h2 id="稍微比喻一下"><a href="#稍微比喻一下" class="headerlink" title="稍微比喻一下"></a>稍微比喻一下</h2><p>开车上山，车坏了，拿出工具箱修一修，修好了，继续上路（Exception被捕获，从异常中恢复，继续程序的运行）</p><p>车坏了，自己不知道该怎么修，打电话告诉修车行，告诉他具体是什么问题，要车行过来修（不知道是什么样的逻辑，把异常跑出去到更高的业务层来处理），打电话时要描述的具体，不然修车行不知道你有什么问题（要捕获特定的异常，不能捕获Exception特定异常）</p><p>山塌了（Error）</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;典型回答&quot;&gt;&lt;a href=&quot;#典型回答&quot; class=&quot;headerlink&quot; title=&quot;典型回答:&quot;&gt;&lt;/a&gt;典型回答:&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Exception和Error都继承了Throwable类，在java中只有Throwable类型的实例才可以被抛出（throw）或捕获（catch）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Error：非正常情况下，不太可能出现的情况，绝大多数Error都会导致程序（比如JVM自身）处于非正常的，不可恢复的情况。因为是非正常的情况，所以不需要捕获。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Exception：程序正常运行中，可以预料的意外情况，并且应该被捕获，进行相应的处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Exception分为可检查异常和不可检查异常&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;可检查异常（非RuntimeException）：在源码里必须显式的进行捕获处理，这是编译检查期的一部分。&lt;/li&gt;
&lt;li&gt;不可检查异常（RuntimeException）：运行时异常，通常可以通过编码避免的逻辑错误，具体根据需求判断是否需要捕获，不在编译期做具体要求。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="java" scheme="http://www.jonyonwzj.top/categories/java/"/>
    
    
    <category term="Java面试基础" scheme="http://www.jonyonwzj.top/tags/Java%E9%9D%A2%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>谈谈自己对Java平台的理解,java是解释执行，这句话正确吗？</title>
    <link href="http://www.jonyonwzj.top/2020/12/07/%E8%B0%88%E8%B0%88%E8%87%AA%E5%B7%B1%E5%AF%B9Java%E5%B9%B3%E5%8F%B0%E7%9A%84%E7%90%86%E8%A7%A3-java%E6%98%AF%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%EF%BC%8C%E8%BF%99%E5%8F%A5%E8%AF%9D%E6%AD%A3%E7%A1%AE%E5%90%97%EF%BC%9F/"/>
    <id>http://www.jonyonwzj.top/2020/12/07/%E8%B0%88%E8%B0%88%E8%87%AA%E5%B7%B1%E5%AF%B9Java%E5%B9%B3%E5%8F%B0%E7%9A%84%E7%90%86%E8%A7%A3-java%E6%98%AF%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%EF%BC%8C%E8%BF%99%E5%8F%A5%E8%AF%9D%E6%AD%A3%E7%A1%AE%E5%90%97%EF%BC%9F/</id>
    <published>2020-12-07T11:20:25.000Z</published>
    <updated>2020-12-08T13:11:37.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java是解释执行吗？"><a href="#Java是解释执行吗？" class="headerlink" title="Java是解释执行吗？"></a>Java是解释执行吗？</h1><p>不正确</p><p>1.java源代码经由javac编译为.CLASS字节码文件</p><p>2..CLASS文件经由JVM类加载器解释或编译运行</p><a id="more"></a><p>（1）解释：.CLASS文件经过JVM内嵌的解析器解释执行</p><p>（2）编译：存在JIT（即时编译器）</p><p>（3）AOT编译器：java9提供的直接将所有代码编译为机器语言</p><p><img src="/2020/12/07/%E8%B0%88%E8%B0%88%E8%87%AA%E5%B7%B1%E5%AF%B9Java%E5%B9%B3%E5%8F%B0%E7%9A%84%E7%90%86%E8%A7%A3-java%E6%98%AF%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%EF%BC%8C%E8%BF%99%E5%8F%A5%E8%AF%9D%E6%AD%A3%E7%A1%AE%E5%90%97%EF%BC%9F/1-1.png" alt="关于JAVA平台"></p><h1 id="对Java平台的理解"><a href="#对Java平台的理解" class="headerlink" title="对Java平台的理解"></a>对Java平台的理解</h1><p>说到java平台就不免想到java语言的跨平台特性，java语言的跨平台特性与java虚拟机的存在有着密不可分的关系，使java可以在不同环境中运行，比如说windows，linux平台都有相应的JDK，那么他们也就都有了java运行环境。java和其他编程语言没有特别大的差别，并不是说<strong>java可以跨平台，而是说不同的平台都有着可以让java语言运行的环境</strong>，所以才有了“一次编译，到处运行”。</p><p>严格来说，跨平台的语言不止java一种，但java是<strong>较为</strong>成熟的一种。</p><p>程序从源代码到运行有三个阶段：编码—编译—运行—调试，java是在<strong>编译</strong>阶段体现了跨平台的特性。</p><p>编译过程:</p><p>1.第一次编译：javac编译器将java源代码转化为.CLASS字节码文件</p><p>（.CLASS文件就是可以到处运行的文件）</p><p>2.第二次编译：java字节码会被转换成目标机器代码，由JVM类加载器加载字节码文件,通过解释器逐行解释执行，转换为最终的机器码</p><p>“到处运行”的关键就是JVM，因为在第二次编译中JVM起关键作用。在可以运行java虚拟机的地方都内含着一个JVM操作系统，从而使用java提供了各种不同平台上的虚拟机制。</p><p>强调：java不是编译机制，而是解释机制。java字节码的设计充分考虑了JIT这一即时编译方式，可以将字节码转换成高性能的本地机器码，这同样是虚拟机的一个构成部分。</p><p>第二次编译由JVM类加载器加载字节码文件这种方式执行速度较慢，有些方法和代码块是高频率调用的（热点代码）。所以引进JIT技术(运行时编译)，<strong>提前将这些字节码文件编译成本地机器码，类似于缓存技术，运行时再遇到这类代码可直接执行，而不是先解释后执行。</strong></p><p><img src="/2020/12/07/%E8%B0%88%E8%B0%88%E8%87%AA%E5%B7%B1%E5%AF%B9Java%E5%B9%B3%E5%8F%B0%E7%9A%84%E7%90%86%E8%A7%A3-java%E6%98%AF%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%EF%BC%8C%E8%BF%99%E5%8F%A5%E8%AF%9D%E6%AD%A3%E7%A1%AE%E5%90%97%EF%BC%9F/1-2.png" alt="对JAVA平台的理解"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Java是解释执行吗？&quot;&gt;&lt;a href=&quot;#Java是解释执行吗？&quot; class=&quot;headerlink&quot; title=&quot;Java是解释执行吗？&quot;&gt;&lt;/a&gt;Java是解释执行吗？&lt;/h1&gt;&lt;p&gt;不正确&lt;/p&gt;
&lt;p&gt;1.java源代码经由javac编译为.CLASS字节码文件&lt;/p&gt;
&lt;p&gt;2..CLASS文件经由JVM类加载器解释或编译运行&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://www.jonyonwzj.top/categories/java/"/>
    
    
    <category term="Java面试基础" scheme="http://www.jonyonwzj.top/tags/Java%E9%9D%A2%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.jonyonwzj.top/2020/12/05/hello-world/"/>
    <id>http://www.jonyonwzj.top/2020/12/05/hello-world/</id>
    <published>2020-12-05T09:57:22.844Z</published>
    <updated>2020-12-08T05:42:38.934Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br><span class="line">hexo new <span class="string">&quot;标题&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;center&gt;基本操作&lt;/center&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
